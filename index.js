!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=3)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_PROPERTY_SOURCE="default",t.DEFAULT_PROPERTY_SEP=".",t.PROPERTIES_KEY=Symbol("PROPERTIES_KEY")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(0),o=[String,Boolean,Number,Date],i=[function(e){return e&&String(e)},function(e){return Boolean(e)},function(e){return Number(e)},function(e){return e&&new Date(e)}];function a(e,t,r){if(null==e||"object"!=typeof e)return null;var o=r&&r.source||n.DEFAULT_PROPERTY_SOURCE,i=new t,a=t.prototype[n.PROPERTIES_KEY];return a&&o in a?(a[o].forEach(function(t){var n,o,a;try{var u=t.resolvePath(e);a=t.convert(u,e,i,r)}catch(e){console.error(e)}void 0!==a?Object.assign(i,((n={})[t.name]=a,n)):t.default&&Object.assign(i,((o={})[t.name]=t.default,o))}),i):(console.warn("The type "+t.name+" has no mapping annotation declared."),i)}t.getConverter=function(e){if("function"==typeof e){if(n.PROPERTIES_KEY in e.prototype)return function(t,r,n,o){return a(t,e,o)};var t=o.indexOf(e);return~t?i[t]:e}return function(e){return e}},t.map=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validAssign=function(e,t){for(var r in e=e||{},t)void 0!==t[r]&&(e[r]=t[r]);return e},t.pushByOrder=function(e,t,r){for(var n=0,o=e.length;n<o;n++){var i=e[n];if(r(t)<r(i))return void e.splice(n,0,t)}return e.push(t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(4);t.mapping=n.mapping;var o=r(1);t.map=o.map},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(5),o=r(0),i=r(2);t.mapping=function(e){return function(t,r){if("function"!=typeof t){var a=e||{},u=n.Property.from(a,t,r);t[o.PROPERTIES_KEY]=t[o.PROPERTIES_KEY]||{},t[o.PROPERTIES_KEY][u.source]=t[o.PROPERTIES_KEY][u.source]||[],i.pushByOrder(t[o.PROPERTIES_KEY][u.source],u,function(e){return e.order})}else console.warn("Mapping static members is not allowed, it is a dangerous operation.")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=r(0),i=r(2),a=function(){function e(){this.separator=o.DEFAULT_PROPERTY_SEP,this.source=o.DEFAULT_PROPERTY_SOURCE,this.order=0}return e.from=function(t,r,n){t="function"==typeof t?{type:t}:t;var o=new e;if(o.name=n,i.validAssign(o,t),o.path=o.path||n,!o.type&&Reflect&&"getMetadata"in Reflect){var a=Reflect.getMetadata("design:type",r,n);o.type=a===Array?[]:a}return o.type?Array.isArray(o.type)&&0===o.type.length&&console.warn("The propery "+n+" missing type declaration and it will treated as any[]"):console.warn("The propery "+n+" missing 'type' option and it will be treated as any, you can import module 'reflect-metadata' to get types automatically"),o},e.prototype.resolvePath=function(e){if(e){for(var t=this.path.split(this.separator),r=0,n=t.length;r<n;r++){var o=t[r],i=o.match(/^(.+)\[(\d)\]$/);if(i){var a=i[1],u=i[2];if(!(Array.isArray(e[a])&&e[a].length>u))break;e=e[a][u]}else{if(!(o in e))break;e=e[o]}}return r===n?e:void 0}},e.prototype.convert=function(e,t,r,o){if(Array.isArray(this.type)){if(void 0===e)return e;var i=n.getConverter(this.type[0]);e=(e=Array.isArray(e)?e:[e]).map(function(e){return i(e,t,r,o)})}else{e=n.getConverter(this.type)(e,t,r,o)}return e},e}();t.Property=a}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,