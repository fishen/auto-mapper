!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(6);t.mapping=n.mapping;var o=r(5);t.map=o.map},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_PROPERTY_SOURCE="default",t.DEFAULT_PROPERTY_SEP=".",t.PROPERTIES_KEY=Symbol("PROPERTIES_KEY"),t.CURRENT_PATH="."},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validAssign=function(e,t){for(var r in e=e||{},t)void 0!==t[r]&&(e[r]=t[r]);return e},t.pushByOrder=function(e,t,r){for(var n=0,o=e.length;n<o;n++){var i=e[n];if(r(t)<r(i))return void e.splice(n,0,t)}return e.push(t)},t.isValid=function(e){return!(null==e||e!=e&&isNaN(e)||e instanceof Date&&isNaN(e.valueOf()))}},,function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),o=r(3),i=[String,Boolean,Number,Date],a=[function(e){return o.isValid(e)?String(e):e},function(e){return Boolean(e)},function(e){return Number(e)},function(e){return o.isValid(e)?new Date(e):e}];function u(e,t,r){if(null==e||"object"!=typeof e)return null;var i=new t;return function(e,t){var r=t&&t.source||n.DEFAULT_PROPERTY_SOURCE,i=e.prototype[n.PROPERTIES_KEY];if(!(i&&r in i))return console.warn("The type "+e.name+" has no mapping annotation declared."),[];var a=i[n.DEFAULT_PROPERTY_SOURCE];if(r!==n.DEFAULT_PROPERTY_SOURCE){if(!1===(t&&t.useDefaultSource)||!Array.isArray(a))return i[r];a=a.slice(),i[r].forEach(function(e){var t=a.findIndex(function(t){return e.name===t.name});~t&&a.splice(t,1),o.pushByOrder(a,e,function(e){return e.order})})}return a}(t,r).forEach(function(t){var n,a,u;try{var f=t.resolvePath(e);u=t.convert(f,e,i,r)}catch(e){console.error(e)}o.isValid(u)?Object.assign(i,((n={})[t.name]=u,n)):"default"in t&&Object.assign(i,((a={})[t.name]=t.default,a))}),i}t.getConverter=function(e){if("function"==typeof e){if(n.PROPERTIES_KEY in e.prototype)return function(t,r,n,o){return u(t,e,o)};var t=i.indexOf(e);return~t?a[t]:e}return function(e){return e}},t.map=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(7),o=r(2),i=r(3);t.mapping=function(e){return function(t,r){if("function"!=typeof t){var a=e||{},u=n.Property.from(a,t,r);t[o.PROPERTIES_KEY]=t[o.PROPERTIES_KEY]||{},t[o.PROPERTIES_KEY][u.source]=t[o.PROPERTIES_KEY][u.source]||[],i.pushByOrder(t[o.PROPERTIES_KEY][u.source],u,function(e){return e.order})}else console.warn("Mapping static members is not allowed, it is a dangerous operation.")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(5),o=r(2),i=r(3),a=function(){function e(){this.separator=o.DEFAULT_PROPERTY_SEP,this.source=o.DEFAULT_PROPERTY_SOURCE,this.order=0}return e.from=function(t,r,n){t="function"==typeof t?{type:t}:t;var o=new e;if(o.name=n,i.validAssign(o,t),t.domain&&(t.path?console.warn("The option domain will be ignored when used with path."):o.path=[t.domain,n].join(o.separator)),o.path=o.path||n,!o.type&&Reflect&&"getMetadata"in Reflect){var a=Reflect.getMetadata("design:type",r,n);o.type=a===Array?[]:a}return o.type?Array.isArray(o.type)&&0===o.type.length&&console.warn("The propery "+n+" missing type declaration and it will treated as any[]"):console.warn("The propery "+n+" missing 'type' option and it will be treated as any, you can import module 'reflect-metadata' to get types automatically"),o},e.prototype.resolvePath=function(e){if(e){if(this.path===o.CURRENT_PATH)return e;for(var t=this.path.split(this.separator),r=0,n=t.length;r<n;r++){var i=t[r],a=i.match(/^(.+)\[(\d)\]$/);if(a){var u=a[1],f=a[2];if(!(Array.isArray(e[u])&&e[u].length>f))break;e=e[u][f]}else{if(!(i in e))break;e=e[i]}}return r===n?e:void 0}},e.prototype.convert=function(e,t,r,o){if(Array.isArray(this.type)){if(!i.isValid(e))return e;var a=n.getConverter(this.type[0]);e=(e=Array.isArray(e)?e:[e]).map(function(e){return a(e,t,r,o)})}else{e=n.getConverter(this.type)(e,t,r,o)}return e},e}();t.Property=a}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,