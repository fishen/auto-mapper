!function(e,r){for(var t in r)e[t]=r[t]}(exports,function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=6)}([,,function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.DEFAULT_PROPERTY_SOURCE="default",r.DEFAULT_PROPERTY_SEP=".",r.PROPERTIES_KEY=Symbol("PROPERTIES_KEY"),r.CURRENT_PATH="."},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.validAssign=function(e,r){for(var t in e=e||{},r)void 0!==r[t]&&(e[t]=r[t]);return e},r.pushByOrder=function(e,r,t){for(var n=0,o=e.length;n<o;n++){var i=e[n];if(t(r)<t(i))return void e.splice(n,0,r)}return e.push(r)}},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(2),o=t(3),i=[String,Boolean,Number,Date],a=[function(e){return e&&String(e)},function(e){return Boolean(e)},function(e){return Number(e)},function(e){return e&&new Date(e)}];function u(e,r,t){if(null==e||"object"!=typeof e)return null;var i=new r;return function(e,r){var t=r&&r.source||n.DEFAULT_PROPERTY_SOURCE,i=e.prototype[n.PROPERTIES_KEY];if(!(i&&t in i))return console.warn("The type "+e.name+" has no mapping annotation declared."),[];var a=i[n.DEFAULT_PROPERTY_SOURCE];if(t!==n.DEFAULT_PROPERTY_SOURCE){if(!1===(r&&r.useDefaultSource)||!Array.isArray(a))return i[t];a=a.slice(),i[t].forEach(function(e){var r=a.findIndex(function(r){return e.name===r.name});~r&&a.splice(r,1),o.pushByOrder(a,e,function(e){return e.order})})}return a}(r,t).forEach(function(r){var n,o,a;try{var u=r.resolvePath(e);a=r.convert(u,e,i,t)}catch(e){console.error(e)}void 0!==a?Object.assign(i,((n={})[r.name]=a,n)):r.default&&Object.assign(i,((o={})[r.name]=r.default,o))}),i}r.getConverter=function(e){if("function"==typeof e){if(n.PROPERTIES_KEY in e.prototype)return function(r,t,n,o){return u(r,e,o)};var r=i.indexOf(e);return~r?a[r]:e}return function(e){return e}},r.map=u},,function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(7);r.mapping=n.mapping;var o=t(4);r.map=o.map},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(8),o=t(2),i=t(3);r.mapping=function(e){return function(r,t){if("function"!=typeof r){var a=e||{},u=n.Property.from(a,r,t);r[o.PROPERTIES_KEY]=r[o.PROPERTIES_KEY]||{},r[o.PROPERTIES_KEY][u.source]=r[o.PROPERTIES_KEY][u.source]||[],i.pushByOrder(r[o.PROPERTIES_KEY][u.source],u,function(e){return e.order})}else console.warn("Mapping static members is not allowed, it is a dangerous operation.")}}},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(4),o=t(2),i=t(3),a=function(){function e(){this.separator=o.DEFAULT_PROPERTY_SEP,this.source=o.DEFAULT_PROPERTY_SOURCE,this.order=0}return e.from=function(r,t,n){r="function"==typeof r?{type:r}:r;var o=new e;if(o.name=n,i.validAssign(o,r),o.path=o.path||n,!o.type&&Reflect&&"getMetadata"in Reflect){var a=Reflect.getMetadata("design:type",t,n);o.type=a===Array?[]:a}return o.type?Array.isArray(o.type)&&0===o.type.length&&console.warn("The propery "+n+" missing type declaration and it will treated as any[]"):console.warn("The propery "+n+" missing 'type' option and it will be treated as any, you can import module 'reflect-metadata' to get types automatically"),o},e.prototype.resolvePath=function(e){if(e){if(this.path===o.CURRENT_PATH)return e;for(var r=this.path.split(this.separator),t=0,n=r.length;t<n;t++){var i=r[t],a=i.match(/^(.+)\[(\d)\]$/);if(a){var u=a[1],f=a[2];if(!(Array.isArray(e[u])&&e[u].length>f))break;e=e[u][f]}else{if(!(i in e))break;e=e[i]}}return t===n?e:void 0}},e.prototype.convert=function(e,r,t,o){if(Array.isArray(this.type)){if(void 0===e)return e;var i=n.getConverter(this.type[0]);e=(e=Array.isArray(e)?e:[e]).map(function(e){return i(e,r,t,o)})}else{e=n.getConverter(this.type)(e,r,t,o)}return e},e}();r.Property=a}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,