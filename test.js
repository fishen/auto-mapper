!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(6);t.mapping=n.mapping;var o=r(5);t.map=o.map},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={name:"fisher",age:"1s2",src:{number:"13"},address:{id:"1",city:"北京",zip_code:"10086"},address1:[{id:"1",city:"北京",zip_code:"10086",alias:["京城","北平"],other:[{key:"key",value:"1"}]}],date:"sfsdf",dates:[Date()],staticProp:"123"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_PROPERTY_SOURCE="default",t.DEFAULT_PROPERTY_SEP=".",t.PROPERTIES_KEY=Symbol("PROPERTIES_KEY"),t.CURRENT_PATH="."},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validAssign=function(e,t){for(var r in e=e||{},t)void 0!==t[r]&&(e[r]=t[r]);return e},t.pushByOrder=function(e,t,r){for(var n=0,o=e.length;n<o;n++){var i=e[n];if(r(t)<r(i))return void e.splice(n,0,t)}return e.push(t)},t.isValid=function(e){return!(null==e||e!=e&&isNaN(e)||e instanceof Date&&isNaN(e.valueOf()))}},function(e,t,r){(function(e,t){
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r;!function(r){!function(n){var o="object"==typeof t?t:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),i=a(r);function a(e,t){return function(r,n){"function"!=typeof e[r]&&Object.defineProperty(e,r,{configurable:!0,writable:!0,value:n}),t&&t(r,n)}}void 0===o.Reflect?o.Reflect=r:i=a(o.Reflect,i),function(t){var r=Object.prototype.hasOwnProperty,n="function"==typeof Symbol,o=n&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=n&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",a="function"==typeof Object.create,u={__proto__:[]}instanceof Array,c=!a&&!u,f={create:a?function(){return D(Object.create(null))}:u?function(){return D({__proto__:null})}:function(){return D({})},has:c?function(e,t){return r.call(e,t)}:function(e,t){return t in e},get:c?function(e,t){return r.call(e,t)?e[t]:void 0}:function(e,t){return e[t]}},s=Object.getPrototypeOf(Function),p="object"==typeof e&&e.env&&"true"===e.env.REFLECT_METADATA_USE_MAP_POLYFILL,l=p||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var e={},t=[],r=function(){function e(e,t,r){this._index=0,this._keys=e,this._values=t,this._selector=r}return e.prototype["@@iterator"]=function(){return this},e.prototype[i]=function(){return this},e.prototype.next=function(){var e=this._index;if(e>=0&&e<this._keys.length){var r=this._selector(this._keys[e],this._values[e]);return e+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:r,done:!1}}return{value:void 0,done:!0}},e.prototype.throw=function(e){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),e},e.prototype.return=function(e){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:e,done:!0}},e}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=e,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(e){return this._find(e,!1)>=0},t.prototype.get=function(e){var t=this._find(e,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(e,t){var r=this._find(e,!0);return this._values[r]=t,this},t.prototype.delete=function(t){var r=this._find(t,!1);if(r>=0){for(var n=this._keys.length,o=r+1;o<n;o++)this._keys[o-1]=this._keys[o],this._values[o-1]=this._values[o];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=e,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=e,this._cacheIndex=-2},t.prototype.keys=function(){return new r(this._keys,this._values,n)},t.prototype.values=function(){return new r(this._keys,this._values,o)},t.prototype.entries=function(){return new r(this._keys,this._values,a)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[i]=function(){return this.entries()},t.prototype._find=function(e,t){return this._cacheKey!==e&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=e)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(e),this._values.push(void 0)),this._cacheIndex},t}();function n(e,t){return e}function o(e,t){return t}function a(e,t){return[e,t]}}():Map,y=p||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function e(){this._map=new l}return Object.defineProperty(e.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.add=function(e){return this._map.set(e,e),this},e.prototype.delete=function(e){return this._map.delete(e)},e.prototype.clear=function(){this._map.clear()},e.prototype.keys=function(){return this._map.keys()},e.prototype.values=function(){return this._map.values()},e.prototype.entries=function(){return this._map.entries()},e.prototype["@@iterator"]=function(){return this.keys()},e.prototype[i]=function(){return this.keys()},e}():Set,d=new(p||"function"!=typeof WeakMap?function(){var e=16,t=f.create(),n=o();return function(){function e(){this._key=o()}return e.prototype.has=function(e){var t=i(e,!1);return void 0!==t&&f.has(t,this._key)},e.prototype.get=function(e){var t=i(e,!1);return void 0!==t?f.get(t,this._key):void 0},e.prototype.set=function(e,t){var r=i(e,!0);return r[this._key]=t,this},e.prototype.delete=function(e){var t=i(e,!1);return void 0!==t&&delete t[this._key]},e.prototype.clear=function(){this._key=o()},e}();function o(){var e;do{e="@@WeakMap@@"+u()}while(f.has(t,e));return t[e]=!0,e}function i(e,t){if(!r.call(e,n)){if(!t)return;Object.defineProperty(e,n,{value:f.create()})}return e[n]}function a(e,t){for(var r=0;r<t;++r)e[r]=255*Math.random()|0;return e}function u(){var t=function(e){if("function"==typeof Uint8Array)return"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(e)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(e)):a(new Uint8Array(e),e);return a(new Array(e),e)}(e);t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var r="",n=0;n<e;++n){var o=t[n];4!==n&&6!==n&&8!==n||(r+="-"),o<16&&(r+="0"),r+=o.toString(16).toLowerCase()}return r}}():WeakMap);function h(e,t,r){var n=d.get(e);if(O(n)){if(!r)return;n=new l,d.set(e,n)}var o=n.get(t);if(O(o)){if(!r)return;o=new l,n.set(t,o)}return o}function v(e,t,r){var n=h(t,r,!1);return!O(n)&&!!n.has(e)}function m(e,t,r){var n=h(t,r,!1);if(!O(n))return n.get(e)}function g(e,t,r,n){var o=h(r,n,!0);o.set(e,t)}function _(e,t){var r=[],n=h(e,t,!1);if(O(n))return r;for(var o=n.keys(),a=function(e){var t=A(e,i);if(!T(t))throw new TypeError;var r=t.call(e);if(!R(r))throw new TypeError;return r}(o),u=0;;){var c=k(a);if(!c)return r.length=u,r;var f=c.value;try{r[u]=f}catch(e){try{M(a)}finally{throw e}}u++}}function b(e){if(null===e)return 1;switch(typeof e){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===e?1:6;default:return 6}}function O(e){return void 0===e}function w(e){return null===e}function R(e){return"object"==typeof e?null!==e:"function"==typeof e}function P(e,t){switch(b(e)){case 0:case 1:case 2:case 3:case 4:case 5:return e}var r=3===t?"string":5===t?"number":"default",n=A(e,o);if(void 0!==n){var i=n.call(e,r);if(R(i))throw new TypeError;return i}return function(e,t){if("string"===t){var r=e.toString;if(T(r)){var n=r.call(e);if(!R(n))return n}var o=e.valueOf;if(T(o)){var n=o.call(e);if(!R(n))return n}}else{var o=e.valueOf;if(T(o)){var n=o.call(e);if(!R(n))return n}var i=e.toString;if(T(i)){var n=i.call(e);if(!R(n))return n}}throw new TypeError}(e,"default"===r?"number":r)}function j(e){var t=P(e,3);return"symbol"==typeof t?t:function(e){return""+e}(t)}function E(e){return Array.isArray?Array.isArray(e):e instanceof Object?e instanceof Array:"[object Array]"===Object.prototype.toString.call(e)}function T(e){return"function"==typeof e}function S(e){return"function"==typeof e}function A(e,t){var r=e[t];if(null!=r){if(!T(r))throw new TypeError;return r}}function k(e){var t=e.next();return!t.done&&t}function M(e){var t=e.return;t&&t.call(e)}function x(e){var t=Object.getPrototypeOf(e);if("function"!=typeof e||e===s)return t;if(t!==s)return t;var r=e.prototype,n=r&&Object.getPrototypeOf(r);if(null==n||n===Object.prototype)return t;var o=n.constructor;return"function"!=typeof o?t:o===e?t:o}function D(e){return e.__=void 0,delete e.__,e}t("decorate",function(e,t,r,n){if(O(r)){if(!E(e))throw new TypeError;if(!S(t))throw new TypeError;return function(e,t){for(var r=e.length-1;r>=0;--r){var n=e[r],o=n(t);if(!O(o)&&!w(o)){if(!S(o))throw new TypeError;t=o}}return t}(e,t)}if(!E(e))throw new TypeError;if(!R(t))throw new TypeError;if(!R(n)&&!O(n)&&!w(n))throw new TypeError;return w(n)&&(n=void 0),r=j(r),function(e,t,r,n){for(var o=e.length-1;o>=0;--o){var i=e[o],a=i(t,r,n);if(!O(a)&&!w(a)){if(!R(a))throw new TypeError;n=a}}return n}(e,t,r,n)}),t("metadata",function(e,t){return function(r,n){if(!R(r))throw new TypeError;if(!O(n)&&!function(e){switch(b(e)){case 3:case 4:return!0;default:return!1}}(n))throw new TypeError;g(e,t,r,n)}}),t("defineMetadata",function(e,t,r,n){if(!R(r))throw new TypeError;O(n)||(n=j(n));return g(e,t,r,n)}),t("hasMetadata",function(e,t,r){if(!R(t))throw new TypeError;O(r)||(r=j(r));return function e(t,r,n){var o=v(t,r,n);if(o)return!0;var i=x(r);if(!w(i))return e(t,i,n);return!1}(e,t,r)}),t("hasOwnMetadata",function(e,t,r){if(!R(t))throw new TypeError;O(r)||(r=j(r));return v(e,t,r)}),t("getMetadata",function(e,t,r){if(!R(t))throw new TypeError;O(r)||(r=j(r));return function e(t,r,n){var o=v(t,r,n);if(o)return m(t,r,n);var i=x(r);if(!w(i))return e(t,i,n);return}(e,t,r)}),t("getOwnMetadata",function(e,t,r){if(!R(t))throw new TypeError;O(r)||(r=j(r));return m(e,t,r)}),t("getMetadataKeys",function(e,t){if(!R(e))throw new TypeError;O(t)||(t=j(t));return function e(t,r){var n=_(t,r);var o=x(t);if(null===o)return n;var i=e(o,r);if(i.length<=0)return n;if(n.length<=0)return i;var a=new y;var u=[];for(var c=0,f=n;c<f.length;c++){var s=f[c],p=a.has(s);p||(a.add(s),u.push(s))}for(var l=0,d=i;l<d.length;l++){var s=d[l],p=a.has(s);p||(a.add(s),u.push(s))}return u}(e,t)}),t("getOwnMetadataKeys",function(e,t){if(!R(e))throw new TypeError;O(t)||(t=j(t));return _(e,t)}),t("deleteMetadata",function(e,t,r){if(!R(t))throw new TypeError;O(r)||(r=j(r));var n=h(t,r,!1);if(O(n))return!1;if(!n.delete(e))return!1;if(n.size>0)return!0;var o=d.get(t);return o.delete(r),o.size>0||(d.delete(t),!0)})}(i)}()}(r||(r={}))}).call(this,r(11),r(12))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),o=r(3),i=[String,Boolean,Number,Date],a=[function(e){return o.isValid(e)?String(e):e},function(e){return Boolean(e)},function(e){return Number(e)},function(e){return o.isValid(e)?new Date(e):e}];function u(e,t,r){if(null==e||"object"!=typeof e)return null;var i=new t;return function(e,t){var r=t&&t.source||n.DEFAULT_PROPERTY_SOURCE,i=e.prototype[n.PROPERTIES_KEY];if(!(i&&r in i))return console.warn("The type "+e.name+" has no mapping annotation declared."),[];var a=i[n.DEFAULT_PROPERTY_SOURCE];if(r!==n.DEFAULT_PROPERTY_SOURCE){if(!1===(t&&t.useDefaultSource)||!Array.isArray(a))return i[r];a=a.slice(),i[r].forEach(function(e){var t=a.findIndex(function(t){return e.name===t.name});~t&&a.splice(t,1),o.pushByOrder(a,e,function(e){return e.order})})}return a}(t,r).forEach(function(t){var n,a,u;try{var c=t.resolvePath(e);u=t.convert(c,e,i,r)}catch(e){console.error(e)}o.isValid(u)?Object.assign(i,((n={})[t.name]=u,n)):"default"in t&&Object.assign(i,((a={})[t.name]=t.default,a))}),i}t.getConverter=function(e){if("function"==typeof e){if(n.PROPERTIES_KEY in e.prototype)return function(t,r,n,o){return u(t,e,o)};var t=i.indexOf(e);return~t?a[t]:e}return function(e){return e}},t.map=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(7),o=r(2),i=r(3);t.mapping=function(e){return function(t,r){if("function"!=typeof t){var a=e||{},u=n.Property.from(a,t,r);t[o.PROPERTIES_KEY]=t[o.PROPERTIES_KEY]||{},t[o.PROPERTIES_KEY][u.source]=t[o.PROPERTIES_KEY][u.source]||[],i.pushByOrder(t[o.PROPERTIES_KEY][u.source],u,function(e){return e.order})}else console.warn("Mapping static members is not allowed, it is a dangerous operation.")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(5),o=r(2),i=r(3),a=function(){function e(){this.separator=o.DEFAULT_PROPERTY_SEP,this.source=o.DEFAULT_PROPERTY_SOURCE,this.order=0}return e.from=function(t,r,n){t="function"==typeof t?{type:t}:t;var o=new e;if(o.name=n,i.validAssign(o,t),t.domain&&(t.path?console.warn("The option domain will be ignored when used with path."):o.path=[t.domain,n].join(o.separator)),o.path=o.path||n,!o.type&&Reflect&&"getMetadata"in Reflect){var a=Reflect.getMetadata("design:type",r,n);o.type=a===Array?[]:a}return o.type?Array.isArray(o.type)&&0===o.type.length&&console.warn("The propery "+n+" missing type declaration and it will treated as any[]"):console.warn("The propery "+n+" missing 'type' option and it will be treated as any, you can import module 'reflect-metadata' to get types automatically"),o},e.prototype.resolvePath=function(e){if(e){if(this.path===o.CURRENT_PATH)return e;for(var t=this.path.split(this.separator),r=0,n=t.length;r<n;r++){var i=t[r],a=i.match(/^(.+)\[(\d)\]$/);if(a){var u=a[1],c=a[2];if(!(Array.isArray(e[u])&&e[u].length>c))break;e=e[u][c]}else{if(!(i in e))break;e=e[i]}}return r===n?e:void 0}},e.prototype.convert=function(e,t,r,o){if(Array.isArray(this.type)){if(!i.isValid(e))return e;var a=n.getConverter(this.type[0]);e=(e=Array.isArray(e)?e:[e]).map(function(e){return a(e,t,r,o)})}else{e=n.getConverter(this.type)(e,t,r,o)}return e},e}();t.Property=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(9),r(10),r(13),r(14),r(15),r(16),r(17),r(18),r(19),r(20),r(21)},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),u=function(){function e(){this.age=1}return n([i.mapping({type:String}),o("design:type",String)],e.prototype,"name",void 0),n([i.mapping({type:Boolean}),o("design:type",Boolean)],e.prototype,"gender",void 0),n([i.mapping({type:Number}),o("design:type",Number)],e.prototype,"age",void 0),n([i.mapping({path:"src.number",type:Number}),o("design:type",Number)],e.prototype,"num",void 0),e}(),c=i.map(a.default,u);c&&(console.assert(c.name===a.default.name,"普通属性获取失败"),console.assert(!!c.num,"拉取对象失败"),console.assert(c.num===+a.default.src.number,"普通类型转换失败"),console.assert(!1===c.gender,"获取不存在的属性不为空"))},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},a=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(4);var u=r(0),c=r(1),f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.age=1,t.date=new Date,t}return o(t,e),i([u.mapping(),a("design:type",String)],t.prototype,"gender",void 0),i([u.mapping(),a("design:type",Number)],t.prototype,"age",void 0),i([u.mapping({path:"src.number"}),a("design:type",Number)],t.prototype,"num",void 0),i([u.mapping(),a("design:type",Date)],t.prototype,"date",void 0),t}(function(){function e(){}return i([u.mapping(),a("design:type",String)],e.prototype,"name",void 0),e}()),s=u.map(c.default,f);s&&(console.assert(s.name===c.default.name,"普通属性获取失败"),console.assert(!!s.num,"拉取对象失败"),console.assert(s.num===+c.default.src.number,"普通类型转换失败"),console.assert(void 0===s.gender,"获取不存在的属性不为空"),console.assert(s.date instanceof Date,"日期对像转换失败"))},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var c,f=[],s=!1,p=-1;function l(){s&&c&&(s=!1,c.length?f=c.concat(f):p=-1,f.length&&y())}function y(){if(!s){var e=u(l);s=!0;for(var t=f.length;t;){for(c=f,f=[];++p<t;)c&&c[p].run();p=-1,t=f.length}c=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];f.push(new d(e,t)),1!==f.length||s||u(y)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(4);var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping({path:"address1[0].city"}),o("design:type",String)],e.prototype,"cityName",void 0),n([i.mapping(function(e,t,r){return"I'm "+t.name+" and i come from "+r.cityName}),o("design:type",String)],e.prototype,"intro",void 0),n([i.mapping(function(){throw new Error("cast error")}),o("design:type",String)],e.prototype,"error",void 0),e}(),c=i.map(a.default,u);c&&(console.assert("string"==typeof c.intro,"自定义转换失败"),console.assert(void 0===c.error,"自定义转换抛出错误转换失败"))},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(4);var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping(),o("design:type",Number)],e.prototype,"id",void 0),n([i.mapping(),o("design:type",String)],e.prototype,"city",void 0),n([i.mapping({path:"zip_code"}),o("design:type",String)],e.prototype,"zipCode",void 0),e}(),c=function(){function e(){}return n([i.mapping({path:"address1[0].city"}),o("design:type",String)],e.prototype,"cityName",void 0),n([i.mapping({path:"src.number"}),o("design:type",Number)],e.prototype,"num",void 0),n([i.mapping({path:"address1[0]"}),o("design:type",u)],e.prototype,"address",void 0),e}(),f=i.map(a.default,c);f&&(console.assert(f.cityName===a.default.address.city,"属性拉取失败"),console.assert("number"==typeof f.num,"拉取基础属性转换失败"),console.assert(f.address instanceof u,"拉取自定义类型属性转换失败"))},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},a=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(4);var u=r(0),c=r(1),f=function(){function e(){}return i([u.mapping(),a("design:type",Number)],e.prototype,"id",void 0),i([u.mapping(),a("design:type",String)],e.prototype,"city",void 0),i([u.mapping({path:"zip_code"}),a("design:type",String)],e.prototype,"zipCode",void 0),e}(),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),i([u.mapping(),a("design:type",f)],t.prototype,"address",void 0),t}(function(){function e(){}return i([u.mapping(),a("design:type",String)],e.prototype,"name",void 0),e}()),p=u.map(c.default,s);p&&(console.assert(p.name===c.default.name,"普通属性获取失败"),console.assert(p.address&&p.address instanceof f,"自定义对象转换失败"))},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(4);var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping(),o("design:type",Number)],e.prototype,"id",void 0),n([i.mapping(),o("design:type",String)],e.prototype,"city",void 0),n([i.mapping({path:"zip_code"}),o("design:type",String)],e.prototype,"zipCode",void 0),e}(),c=function(){function e(){}return n([i.mapping({path:"address1",type:[u]}),o("design:type",Array)],e.prototype,"address1",void 0),n([i.mapping({type:[Date]}),o("design:type",Object)],e.prototype,"dates",void 0),e}(),f=i.map(a.default,c);f&&(console.assert(Array.isArray(f.dates),"数组转换失败"),console.assert(f.address1[0]instanceof u,"数组对像转换失败"))},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping({type:String,source:"other",path:"person.lastname"}),i.mapping({type:String,default:"fisher"}),o("design:type",String)],e.prototype,"name",void 0),e}(),c={person:{lastname:"jack"}},f=i.map(a.default,u),s=i.map(c,u,{source:"other"});f&&s&&console.assert(f.name===a.default.name&&s.name===c.person.lastname,"多个数据源属性获取失败")},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),u=function(){function e(){this.name="jack"}return n([i.mapping({type:function(e,t){return t.name},order:1}),o("design:type",String)],e.prototype,"fullName",void 0),n([i.mapping({type:String}),o("design:type",String)],e.prototype,"name",void 0),e}(),c=i.map(a.default,u);c&&console.assert(c.fullName===a.default.name,"排序属性获取失败")},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping({type:String,source:"other",path:"person.lastname"}),i.mapping({type:String,default:"fisher"}),o("design:type",String)],e.prototype,"name",void 0),n([i.mapping({type:Number,path:"src.number"}),o("design:type",Number)],e.prototype,"age",void 0),e}(),c={person:{lastname:"jack"},src:{number:18}},f=i.map(a.default,u),s=i.map(c,u,{source:"other"}),p=i.map(c,u,{source:"other",useDefaultSource:!1});f&&s&&(console.assert(f.name===a.default.name&&s.name===c.person.lastname,"多个数据源属性获取失败"),console.assert(s.age===c.src.number,"使用默认数据源配置失败"),console.assert(void 0===p.age,"不使用默认数据源配置失败"))},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=function(){function e(){this.name="fisher",this.age=1,this.array=[]}return n([i.mapping({type:String}),o("design:type",String)],e.prototype,"name",void 0),n([i.mapping({type:Boolean}),o("design:type",Boolean)],e.prototype,"gender",void 0),n([i.mapping({type:Number,default:18}),o("design:type",Number)],e.prototype,"age",void 0),n([i.mapping({type:[String]}),o("design:type",Array)],e.prototype,"array",void 0),e}(),u={name:void 0,gender:null,age:void 0,array:null},c=i.map(u,a);c&&(console.assert("fisher"===c.name,"默认值获取失败"),console.assert(18===c.age,"参数默认值获取失败"),console.assert(!1===c.gender,"布尔类型转换失败"),console.assert(Array.isArray(c.array)&&0===c.array.length,"数组默认值转换失败"))},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(4);var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping({domain:"src",path:"src.number"}),o("design:type",Number)],e.prototype,"number",void 0),n([i.mapping({domain:"address"}),o("design:type",String)],e.prototype,"city",void 0),e}(),c=i.map(a.default,u);c&&(console.assert(c.number===+a.default.src.number,"域属性获取失败"),console.assert(c.city===a.default.address.city,"域属性获取失败"))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,