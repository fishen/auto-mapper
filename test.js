!function(e,t){for(var r in t)e[r]=t[r]}(exports,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=9)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(6);t.map=n.map,t.mapping=n.mapping},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={name:"fisher",age:"1s2",src:{number:"13"},address:{id:"1",city:"北京",zip_code:"10086"},address1:[{id:"1",city:"北京",zip_code:"10086",alias:["京城","北平"],other:[{key:"key",value:"1"}]}],date:"sfsdf",dates:[Date()],staticProp:"123"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_PROPERTY_SOURCE="default",t.DEFAULT_PROPERTY_SEP=".",t.PROPERTIES_KEY=Symbol("PROPERTIES_KEY"),t.CURRENT_PATH="."},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validAssign=function(e,t){for(var r in e=e||{},t)void 0!==t[r]&&(e[r]=t[r]);return e},t.pushByOrder=function(e,t,r){for(var n=0,o=e.length;n<o;n++){var i=e[n];if(r(t)<r(i))return void e.splice(n,0,t)}return e.push(t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),o=r(3),i=[String,Boolean,Number,Date],a=[function(e){return e&&String(e)},function(e){return Boolean(e)},function(e){return Number(e)},function(e){return e&&new Date(e)}];function u(e,t,r){if(null==e||"object"!=typeof e)return null;var i=new t;return function(e,t){var r=t&&t.source||n.DEFAULT_PROPERTY_SOURCE,i=e.prototype[n.PROPERTIES_KEY];if(!(i&&r in i))return console.warn("The type "+e.name+" has no mapping annotation declared."),[];var a=i[n.DEFAULT_PROPERTY_SOURCE];if(r!==n.DEFAULT_PROPERTY_SOURCE){if(!1===(t&&t.useDefaultSource)||!Array.isArray(a))return i[r];a=a.slice(),i[r].forEach(function(e){var t=a.findIndex(function(t){return e.name===t.name});~t&&a.splice(t,1),o.pushByOrder(a,e,function(e){return e.order})})}return a}(t,r).forEach(function(t){var n,o,a;try{var u=t.resolvePath(e);a=t.convert(u,e,i,r)}catch(e){console.error(e)}void 0!==a?Object.assign(i,((n={})[t.name]=a,n)):t.default&&Object.assign(i,((o={})[t.name]=t.default,o))}),i}t.getConverter=function(e){if("function"==typeof e){if(n.PROPERTIES_KEY in e.prototype)return function(t,r,n,o){return u(t,e,o)};var t=i.indexOf(e);return~t?a[t]:e}return function(e){return e}},t.map=u},function(e,t,r){(function(e,t){
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r;!function(r){!function(n){var o="object"==typeof t?t:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),i=a(r);function a(e,t){return function(r,n){"function"!=typeof e[r]&&Object.defineProperty(e,r,{configurable:!0,writable:!0,value:n}),t&&t(r,n)}}void 0===o.Reflect?o.Reflect=r:i=a(o.Reflect,i),function(t){var r=Object.prototype.hasOwnProperty,n="function"==typeof Symbol,o=n&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=n&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",a="function"==typeof Object.create,u={__proto__:[]}instanceof Array,c=!a&&!u,f={create:a?function(){return N(Object.create(null))}:u?function(){return N({__proto__:null})}:function(){return N({})},has:c?function(e,t){return r.call(e,t)}:function(e,t){return t in e},get:c?function(e,t){return r.call(e,t)?e[t]:void 0}:function(e,t){return e[t]}},s=Object.getPrototypeOf(Function),p="object"==typeof e&&e.env&&"true"===e.env.REFLECT_METADATA_USE_MAP_POLYFILL,l=p||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var e={},t=[],r=function(){function e(e,t,r){this._index=0,this._keys=e,this._values=t,this._selector=r}return e.prototype["@@iterator"]=function(){return this},e.prototype[i]=function(){return this},e.prototype.next=function(){var e=this._index;if(e>=0&&e<this._keys.length){var r=this._selector(this._keys[e],this._values[e]);return e+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:r,done:!1}}return{value:void 0,done:!0}},e.prototype.throw=function(e){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),e},e.prototype.return=function(e){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:e,done:!0}},e}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=e,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(e){return this._find(e,!1)>=0},t.prototype.get=function(e){var t=this._find(e,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(e,t){var r=this._find(e,!0);return this._values[r]=t,this},t.prototype.delete=function(t){var r=this._find(t,!1);if(r>=0){for(var n=this._keys.length,o=r+1;o<n;o++)this._keys[o-1]=this._keys[o],this._values[o-1]=this._values[o];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=e,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=e,this._cacheIndex=-2},t.prototype.keys=function(){return new r(this._keys,this._values,n)},t.prototype.values=function(){return new r(this._keys,this._values,o)},t.prototype.entries=function(){return new r(this._keys,this._values,a)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[i]=function(){return this.entries()},t.prototype._find=function(e,t){return this._cacheKey!==e&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=e)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(e),this._values.push(void 0)),this._cacheIndex},t}();function n(e,t){return e}function o(e,t){return t}function a(e,t){return[e,t]}}():Map,y=p||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function e(){this._map=new l}return Object.defineProperty(e.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),e.prototype.has=function(e){return this._map.has(e)},e.prototype.add=function(e){return this._map.set(e,e),this},e.prototype.delete=function(e){return this._map.delete(e)},e.prototype.clear=function(){this._map.clear()},e.prototype.keys=function(){return this._map.keys()},e.prototype.values=function(){return this._map.values()},e.prototype.entries=function(){return this._map.entries()},e.prototype["@@iterator"]=function(){return this.keys()},e.prototype[i]=function(){return this.keys()},e}():Set,d=new(p||"function"!=typeof WeakMap?function(){var e=16,t=f.create(),n=o();return function(){function e(){this._key=o()}return e.prototype.has=function(e){var t=i(e,!1);return void 0!==t&&f.has(t,this._key)},e.prototype.get=function(e){var t=i(e,!1);return void 0!==t?f.get(t,this._key):void 0},e.prototype.set=function(e,t){var r=i(e,!0);return r[this._key]=t,this},e.prototype.delete=function(e){var t=i(e,!1);return void 0!==t&&delete t[this._key]},e.prototype.clear=function(){this._key=o()},e}();function o(){var e;do{e="@@WeakMap@@"+u()}while(f.has(t,e));return t[e]=!0,e}function i(e,t){if(!r.call(e,n)){if(!t)return;Object.defineProperty(e,n,{value:f.create()})}return e[n]}function a(e,t){for(var r=0;r<t;++r)e[r]=255*Math.random()|0;return e}function u(){var t=function(e){if("function"==typeof Uint8Array)return"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(e)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(e)):a(new Uint8Array(e),e);return a(new Array(e),e)}(e);t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var r="",n=0;n<e;++n){var o=t[n];4!==n&&6!==n&&8!==n||(r+="-"),o<16&&(r+="0"),r+=o.toString(16).toLowerCase()}return r}}():WeakMap);function h(e,t,r){var n=d.get(e);if(w(n)){if(!r)return;n=new l,d.set(e,n)}var o=n.get(t);if(w(o)){if(!r)return;o=new l,n.set(t,o)}return o}function v(e,t,r){var n=h(t,r,!1);return!w(n)&&!!n.has(e)}function m(e,t,r){var n=h(t,r,!1);if(!w(n))return n.get(e)}function g(e,t,r,n){var o=h(r,n,!0);o.set(e,t)}function _(e,t){var r=[],n=h(e,t,!1);if(w(n))return r;for(var o=n.keys(),a=function(e){var t=A(e,i);if(!T(t))throw new TypeError;var r=t.call(e);if(!R(r))throw new TypeError;return r}(o),u=0;;){var c=k(a);if(!c)return r.length=u,r;var f=c.value;try{r[u]=f}catch(e){try{M(a)}finally{throw e}}u++}}function b(e){if(null===e)return 1;switch(typeof e){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===e?1:6;default:return 6}}function w(e){return void 0===e}function O(e){return null===e}function R(e){return"object"==typeof e?null!==e:"function"==typeof e}function P(e,t){switch(b(e)){case 0:case 1:case 2:case 3:case 4:case 5:return e}var r=3===t?"string":5===t?"number":"default",n=A(e,o);if(void 0!==n){var i=n.call(e,r);if(R(i))throw new TypeError;return i}return function(e,t){if("string"===t){var r=e.toString;if(T(r)){var n=r.call(e);if(!R(n))return n}var o=e.valueOf;if(T(o)){var n=o.call(e);if(!R(n))return n}}else{var o=e.valueOf;if(T(o)){var n=o.call(e);if(!R(n))return n}var i=e.toString;if(T(i)){var n=i.call(e);if(!R(n))return n}}throw new TypeError}(e,"default"===r?"number":r)}function j(e){var t=P(e,3);return"symbol"==typeof t?t:function(e){return""+e}(t)}function E(e){return Array.isArray?Array.isArray(e):e instanceof Object?e instanceof Array:"[object Array]"===Object.prototype.toString.call(e)}function T(e){return"function"==typeof e}function S(e){return"function"==typeof e}function A(e,t){var r=e[t];if(null!=r){if(!T(r))throw new TypeError;return r}}function k(e){var t=e.next();return!t.done&&t}function M(e){var t=e.return;t&&t.call(e)}function x(e){var t=Object.getPrototypeOf(e);if("function"!=typeof e||e===s)return t;if(t!==s)return t;var r=e.prototype,n=r&&Object.getPrototypeOf(r);if(null==n||n===Object.prototype)return t;var o=n.constructor;return"function"!=typeof o?t:o===e?t:o}function N(e){return e.__=void 0,delete e.__,e}t("decorate",function(e,t,r,n){if(w(r)){if(!E(e))throw new TypeError;if(!S(t))throw new TypeError;return function(e,t){for(var r=e.length-1;r>=0;--r){var n=e[r],o=n(t);if(!w(o)&&!O(o)){if(!S(o))throw new TypeError;t=o}}return t}(e,t)}if(!E(e))throw new TypeError;if(!R(t))throw new TypeError;if(!R(n)&&!w(n)&&!O(n))throw new TypeError;return O(n)&&(n=void 0),r=j(r),function(e,t,r,n){for(var o=e.length-1;o>=0;--o){var i=e[o],a=i(t,r,n);if(!w(a)&&!O(a)){if(!R(a))throw new TypeError;n=a}}return n}(e,t,r,n)}),t("metadata",function(e,t){return function(r,n){if(!R(r))throw new TypeError;if(!w(n)&&!function(e){switch(b(e)){case 3:case 4:return!0;default:return!1}}(n))throw new TypeError;g(e,t,r,n)}}),t("defineMetadata",function(e,t,r,n){if(!R(r))throw new TypeError;w(n)||(n=j(n));return g(e,t,r,n)}),t("hasMetadata",function(e,t,r){if(!R(t))throw new TypeError;w(r)||(r=j(r));return function e(t,r,n){var o=v(t,r,n);if(o)return!0;var i=x(r);if(!O(i))return e(t,i,n);return!1}(e,t,r)}),t("hasOwnMetadata",function(e,t,r){if(!R(t))throw new TypeError;w(r)||(r=j(r));return v(e,t,r)}),t("getMetadata",function(e,t,r){if(!R(t))throw new TypeError;w(r)||(r=j(r));return function e(t,r,n){var o=v(t,r,n);if(o)return m(t,r,n);var i=x(r);if(!O(i))return e(t,i,n);return}(e,t,r)}),t("getOwnMetadata",function(e,t,r){if(!R(t))throw new TypeError;w(r)||(r=j(r));return m(e,t,r)}),t("getMetadataKeys",function(e,t){if(!R(e))throw new TypeError;w(t)||(t=j(t));return function e(t,r){var n=_(t,r);var o=x(t);if(null===o)return n;var i=e(o,r);if(i.length<=0)return n;if(n.length<=0)return i;var a=new y;var u=[];for(var c=0,f=n;c<f.length;c++){var s=f[c],p=a.has(s);p||(a.add(s),u.push(s))}for(var l=0,d=i;l<d.length;l++){var s=d[l],p=a.has(s);p||(a.add(s),u.push(s))}return u}(e,t)}),t("getOwnMetadataKeys",function(e,t){if(!R(e))throw new TypeError;w(t)||(t=j(t));return _(e,t)}),t("deleteMetadata",function(e,t,r){if(!R(t))throw new TypeError;w(r)||(r=j(r));var n=h(t,r,!1);if(w(n))return!1;if(!n.delete(e))return!1;if(n.size>0)return!0;var o=d.get(t);return o.delete(r),o.size>0||(d.delete(t),!0)})}(i)}()}(r||(r={}))}).call(this,r(12),r(13))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(7);t.mapping=n.mapping;var o=r(4);t.map=o.map},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(8),o=r(2),i=r(3);t.mapping=function(e){return function(t,r){if("function"!=typeof t){var a=e||{},u=n.Property.from(a,t,r);t[o.PROPERTIES_KEY]=t[o.PROPERTIES_KEY]||{},t[o.PROPERTIES_KEY][u.source]=t[o.PROPERTIES_KEY][u.source]||[],i.pushByOrder(t[o.PROPERTIES_KEY][u.source],u,function(e){return e.order})}else console.warn("Mapping static members is not allowed, it is a dangerous operation.")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(4),o=r(2),i=r(3),a=function(){function e(){this.separator=o.DEFAULT_PROPERTY_SEP,this.source=o.DEFAULT_PROPERTY_SOURCE,this.order=0}return e.from=function(t,r,n){t="function"==typeof t?{type:t}:t;var o=new e;if(o.name=n,i.validAssign(o,t),o.path=o.path||n,!o.type&&Reflect&&"getMetadata"in Reflect){var a=Reflect.getMetadata("design:type",r,n);o.type=a===Array?[]:a}return o.type?Array.isArray(o.type)&&0===o.type.length&&console.warn("The propery "+n+" missing type declaration and it will treated as any[]"):console.warn("The propery "+n+" missing 'type' option and it will be treated as any, you can import module 'reflect-metadata' to get types automatically"),o},e.prototype.resolvePath=function(e){if(e){if(this.path===o.CURRENT_PATH)return e;for(var t=this.path.split(this.separator),r=0,n=t.length;r<n;r++){var i=t[r],a=i.match(/^(.+)\[(\d)\]$/);if(a){var u=a[1],c=a[2];if(!(Array.isArray(e[u])&&e[u].length>c))break;e=e[u][c]}else{if(!(i in e))break;e=e[i]}}return r===n?e:void 0}},e.prototype.convert=function(e,t,r,o){if(Array.isArray(this.type)){if(void 0===e)return e;var i=n.getConverter(this.type[0]);e=(e=Array.isArray(e)?e:[e]).map(function(e){return i(e,t,r,o)})}else{e=n.getConverter(this.type)(e,t,r,o)}return e},e}();t.Property=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(10),r(11),r(14),r(15),r(16),r(17),r(18),r(19),r(20)},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),u=function(){function e(){this.age=1}return n([i.mapping({type:String}),o("design:type",String)],e.prototype,"name",void 0),n([i.mapping({type:Boolean}),o("design:type",Boolean)],e.prototype,"gender",void 0),n([i.mapping({type:Number}),o("design:type",Number)],e.prototype,"age",void 0),n([i.mapping({path:"src.number",type:Number}),o("design:type",Number)],e.prototype,"num",void 0),e}(),c=i.map(a.default,u);c&&(console.assert(c.name===a.default.name,"普通属性获取失败"),console.assert(isNaN(c.age),"普通类型转换失败"),console.assert(!!c.num,"拉取对象失败"),console.assert(c.num===+a.default.src.number,"普通类型转换失败"),console.assert(!1===c.gender,"获取不存在的属性不为空"))},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},a=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(5);var u=r(0),c=r(1),f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.age=1,t}return o(t,e),i([u.mapping(),a("design:type",String)],t.prototype,"gender",void 0),i([u.mapping(),a("design:type",Number)],t.prototype,"age",void 0),i([u.mapping({path:"src.number"}),a("design:type",Number)],t.prototype,"num",void 0),i([u.mapping(),a("design:type",Date)],t.prototype,"date",void 0),t}(function(){function e(){}return i([u.mapping(),a("design:type",String)],e.prototype,"name",void 0),e}()),s=u.map(c.default,f);s&&(console.assert(s.name===c.default.name,"普通属性获取失败"),console.assert(isNaN(s.age),"普通类型转换失败"),console.assert(!!s.num,"拉取对象失败"),console.assert(s.num===+c.default.src.number,"普通类型转换失败"),console.assert(void 0===s.gender,"获取不存在的属性不为空"),console.assert(s.date instanceof Date,"日期对像转换失败"))},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var c,f=[],s=!1,p=-1;function l(){s&&c&&(s=!1,c.length?f=c.concat(f):p=-1,f.length&&y())}function y(){if(!s){var e=u(l);s=!0;for(var t=f.length;t;){for(c=f,f=[];++p<t;)c&&c[p].run();p=-1,t=f.length}c=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];f.push(new d(e,t)),1!==f.length||s||u(y)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(5);var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping({path:"address1[0].city"}),o("design:type",String)],e.prototype,"cityName",void 0),n([i.mapping(function(e,t,r){return"I'm "+t.name+" and i come from "+r.cityName}),o("design:type",String)],e.prototype,"intro",void 0),n([i.mapping(function(){throw new Error("cast error")}),o("design:type",String)],e.prototype,"error",void 0),e}(),c=i.map(a.default,u);c&&(console.assert("string"==typeof c.intro,"自定义转换失败"),console.assert(void 0===c.error,"自定义转换抛出错误转换失败"))},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(5);var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping(),o("design:type",Number)],e.prototype,"id",void 0),n([i.mapping(),o("design:type",String)],e.prototype,"city",void 0),n([i.mapping({path:"zip_code"}),o("design:type",String)],e.prototype,"zipCode",void 0),e}(),c=function(){function e(){}return n([i.mapping({path:"address1[0].city"}),o("design:type",String)],e.prototype,"cityName",void 0),n([i.mapping({path:"src.number"}),o("design:type",Number)],e.prototype,"num",void 0),n([i.mapping({path:"address1[0]"}),o("design:type",u)],e.prototype,"address",void 0),e}(),f=i.map(a.default,c);f&&(console.assert(f.cityName===a.default.address.city,"属性拉取失败"),console.assert("number"==typeof f.num,"拉取基础属性转换失败"),console.assert(f.address instanceof u,"拉取自定义类型属性转换失败"))},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},a=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(5);var u=r(0),c=r(1),f=function(){function e(){}return i([u.mapping(),a("design:type",Number)],e.prototype,"id",void 0),i([u.mapping(),a("design:type",String)],e.prototype,"city",void 0),i([u.mapping({path:"zip_code"}),a("design:type",String)],e.prototype,"zipCode",void 0),e}(),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),i([u.mapping(),a("design:type",f)],t.prototype,"address",void 0),t}(function(){function e(){}return i([u.mapping(),a("design:type",String)],e.prototype,"name",void 0),e}()),p=u.map(c.default,s);p&&(console.assert(p.name===c.default.name,"普通属性获取失败"),console.assert(p.address&&p.address instanceof f,"自定义对象转换失败"))},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(5);var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping(),o("design:type",Number)],e.prototype,"id",void 0),n([i.mapping(),o("design:type",String)],e.prototype,"city",void 0),n([i.mapping({path:"zip_code"}),o("design:type",String)],e.prototype,"zipCode",void 0),e}(),c=function(){function e(){}return n([i.mapping({path:"address1",type:[u]}),o("design:type",Array)],e.prototype,"address1",void 0),n([i.mapping({type:[Date]}),o("design:type",Object)],e.prototype,"dates",void 0),e}(),f=i.map(a.default,c);f&&(console.assert(Array.isArray(f.dates),"数组转换失败"),console.assert(f.address1[0]instanceof u,"数组对像转换失败"))},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping({type:String,source:"other",path:"person.lastname"}),i.mapping({type:String,default:"fisher"}),o("design:type",String)],e.prototype,"name",void 0),e}(),c={person:{lastname:"jack"}},f=i.map(a.default,u),s=i.map(c,u,{source:"other"});f&&s&&console.assert(f.name===a.default.name&&s.name===c.person.lastname,"多个数据源属性获取失败")},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),u=function(){function e(){this.name="jack"}return n([i.mapping({convert:function(e,t){return t.name},order:1}),o("design:type",String)],e.prototype,"fullName",void 0),n([i.mapping({type:String}),o("design:type",String)],e.prototype,"name",void 0),e}(),c=i.map(a.default,u);c&&console.assert(c.fullName===a.default.name,"排序属性获取失败")},function(e,t,r){"use strict";var n=this&&this.__decorate||function(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),u=function(){function e(){}return n([i.mapping({type:String,source:"other",path:"person.lastname"}),i.mapping({type:String,default:"fisher"}),o("design:type",String)],e.prototype,"name",void 0),n([i.mapping({type:Number,path:"src.number"}),o("design:type",Number)],e.prototype,"age",void 0),e}(),c={person:{lastname:"jack"},src:{number:18}},f=i.map(a.default,u),s=i.map(c,u,{source:"other"}),p=i.map(c,u,{source:"other",useDefaultSource:!1});f&&s&&(console.assert(f.name===a.default.name&&s.name===c.person.lastname,"多个数据源属性获取失败"),console.assert(s.age===c.src.number,"使用默认数据源配置失败"),console.assert(void 0===p.age,"不使用默认数据源配置失败"),console.log(p))}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9kYXRhLXNvdXJjZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udmVydGVyLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWZsZWN0LW1ldGFkYXRhL1JlZmxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9hbm5vdGF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9wcm9wZXJ0eS50cyIsIndlYnBhY2s6Ly8vLi90ZXN0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3Rlc3Qvbm8tcmVmbGVjdC1tZXRhZGF0YS50cyIsIndlYnBhY2s6Ly8vLi90ZXN0L3JlZmxlY3QtbWV0YWRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3Rlc3QvY29udmVydGVyLnRzIiwid2VicGFjazovLy8uL3Rlc3QvcHVsbC1kYXRhLnRzIiwid2VicGFjazovLy8uL3Rlc3QvY3VzdG9tLWNsYXNzLnRzIiwid2VicGFjazovLy8uL3Rlc3QvYXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9tdWx0aS1kYXRhLXNvdXJjZS50cyIsIndlYnBhY2s6Ly8vLi90ZXN0L29yZGVyLnRzIiwid2VicGFjazovLy8uL3Rlc3QvdXNlLWRlZmF1bHQtc291cmNlLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic3JjXzEiLCJtYXAiLCJtYXBwaW5nIiwiZGVmYXVsdCIsImFnZSIsInNyYyIsIm51bWJlciIsImFkZHJlc3MiLCJpZCIsImNpdHkiLCJ6aXBfY29kZSIsImFkZHJlc3MxIiwiYWxpYXMiLCJvdGhlciIsImRhdGUiLCJkYXRlcyIsIkRhdGUiLCJzdGF0aWNQcm9wIiwiREVGQVVMVF9QUk9QRVJUWV9TT1VSQ0UiLCJERUZBVUxUX1BST1BFUlRZX1NFUCIsIlBST1BFUlRJRVNfS0VZIiwiQ1VSUkVOVF9QQVRIIiwidmFsaWRBc3NpZ24iLCJzb3VyY2UiLCJkZXN0IiwidW5kZWZpbmVkIiwicHVzaEJ5T3JkZXIiLCJhcnJheSIsIml0ZW0iLCJzZWxlY3RvciIsImluZGV4IiwibGVuZ3RoXzEiLCJsZW5ndGgiLCJlbGVtZW50Iiwic3BsaWNlIiwicHVzaCIsImNvbnN0YW50c18xIiwidXRpbHNfMSIsIlNZU1RFTV9UWVBFUyIsIlN0cmluZyIsIkJvb2xlYW4iLCJOdW1iZXIiLCJTWVNURU1fQ09OVkVSVEVSUyIsImNvbnN0dWN0b3IiLCJvcHRpb25zIiwiaW5zdGFuY2UiLCJzb3VyY2VOYW1lIiwicHJvcGVydGllcyIsImNvbnNvbGUiLCJ3YXJuIiwiZGVmYXVsdFByb3BlcnRpZXMiLCJ1c2VEZWZhdWx0U291cmNlIiwiQXJyYXkiLCJpc0FycmF5Iiwic2xpY2UiLCJmb3JFYWNoIiwiZmluZEluZGV4Iiwib3JkZXIiLCJnZXRQcm9wZXJ0aWVzIiwicmVzdWx0IiwicmVzb2x2ZVBhdGgiLCJjb252ZXJ0IiwiZXJyb3IiLCJhc3NpZ24iLCJfYSIsIl9iIiwiZ2V0Q29udmVydGVyIiwidHlwZSIsIl9zcmMiLCJfZGVzdCIsImluZGV4T2YiLCJwcm9jZXNzIiwiZ2xvYmFsIiwiUmVmbGVjdCIsImZhY3RvcnkiLCJyb290Iiwic2VsZiIsInRoaXMiLCJGdW5jdGlvbiIsImV4cG9ydGVyIiwibWFrZUV4cG9ydGVyIiwidGFyZ2V0IiwicHJldmlvdXMiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImhhc093biIsInN1cHBvcnRzU3ltYm9sIiwidG9QcmltaXRpdmVTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJzdXBwb3J0c0NyZWF0ZSIsInN1cHBvcnRzUHJvdG8iLCJfX3Byb3RvX18iLCJkb3duTGV2ZWwiLCJIYXNoTWFwIiwiTWFrZURpY3Rpb25hcnkiLCJoYXMiLCJmdW5jdGlvblByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwidXNlUG9seWZpbGwiLCJlbnYiLCJfTWFwIiwiTWFwIiwiZW50cmllcyIsImNhY2hlU2VudGluZWwiLCJhcnJheVNlbnRpbmVsIiwiTWFwSXRlcmF0b3IiLCJrZXlzIiwidmFsdWVzIiwiX2luZGV4IiwiX2tleXMiLCJfdmFsdWVzIiwiX3NlbGVjdG9yIiwibmV4dCIsImRvbmUiLCJ0aHJvdyIsInJldHVybiIsIl9jYWNoZUtleSIsIl9jYWNoZUluZGV4IiwiX2ZpbmQiLCJzZXQiLCJkZWxldGUiLCJzaXplIiwiY2xlYXIiLCJnZXRLZXkiLCJnZXRWYWx1ZSIsImdldEVudHJ5IiwiaW5zZXJ0IiwiXyIsIkNyZWF0ZU1hcFBvbHlmaWxsIiwiX1NldCIsIlNldCIsIl9tYXAiLCJhZGQiLCJNZXRhZGF0YSIsIldlYWtNYXAiLCJVVUlEX1NJWkUiLCJyb290S2V5IiwiQ3JlYXRlVW5pcXVlS2V5IiwiX2tleSIsInRhYmxlIiwiR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUiLCJDcmVhdGVVVUlEIiwiRmlsbFJhbmRvbUJ5dGVzIiwiYnVmZmVyIiwiTWF0aCIsInJhbmRvbSIsImRhdGEiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwibXNDcnlwdG8iLCJHZW5SYW5kb21CeXRlcyIsIm9mZnNldCIsImJ5dGUiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwiQ3JlYXRlV2Vha01hcFBvbHlmaWxsIiwiR2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsIk8iLCJQIiwiQ3JlYXRlIiwidGFyZ2V0TWV0YWRhdGEiLCJJc1VuZGVmaW5lZCIsIm1ldGFkYXRhTWFwIiwiT3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwiT3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsIk9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJNZXRhZGF0YVZhbHVlIiwiT3JkaW5hcnlPd25NZXRhZGF0YUtleXMiLCJrZXlzT2JqIiwib2JqIiwibWV0aG9kIiwiR2V0TWV0aG9kIiwiSXNDYWxsYWJsZSIsIlR5cGVFcnJvciIsIklzT2JqZWN0IiwiR2V0SXRlcmF0b3IiLCJrIiwiSXRlcmF0b3JTdGVwIiwibmV4dFZhbHVlIiwiZSIsIkl0ZXJhdG9yQ2xvc2UiLCJUeXBlIiwieCIsIklzTnVsbCIsIlRvUHJpbWl0aXZlIiwiaW5wdXQiLCJQcmVmZXJyZWRUeXBlIiwiaGludCIsImV4b3RpY1RvUHJpbSIsInRvU3RyaW5nXzEiLCJ2YWx1ZU9mIiwidG9TdHJpbmdfMiIsIk9yZGluYXJ5VG9QcmltaXRpdmUiLCJUb1Byb3BlcnR5S2V5IiwiYXJndW1lbnQiLCJUb1N0cmluZyIsIklzQXJyYXkiLCJJc0NvbnN0cnVjdG9yIiwiViIsImZ1bmMiLCJmIiwiT3JkaW5hcnlHZXRQcm90b3R5cGVPZiIsInByb3RvIiwicHJvdG90eXBlUHJvdG8iLCJjb25zdHJ1Y3RvciIsIl9fIiwiZGVjb3JhdG9ycyIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsImRlY29yYXRvciIsImRlY29yYXRlZCIsIkRlY29yYXRlQ29uc3RydWN0b3IiLCJkZXNjcmlwdG9yIiwiRGVjb3JhdGVQcm9wZXJ0eSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIklzUHJvcGVydHlLZXkiLCJPcmRpbmFyeUhhc01ldGFkYXRhIiwicGFyZW50IiwiT3JkaW5hcnlHZXRNZXRhZGF0YSIsIk9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib3duS2V5cyIsInBhcmVudEtleXMiLCJfaSIsIm93bktleXNfMSIsImhhc0tleSIsInBhcmVudEtleXNfMSIsImFubm90YXRpb25fMSIsImNvbnZlcnRlcl8xIiwicHJvcGVydHlfMSIsIm9wdHMiLCJQcm9wZXJ0eSIsImZyb20iLCJzZXBhcmF0b3IiLCJwYXRoIiwiZGVzaWduVHlwZSIsImdldE1ldGFkYXRhIiwicGF0aGVzIiwic3BsaXQiLCJtYXRjaGVzIiwibWF0Y2giLCJuYW1lXzEiLCJpbmRleF8xIiwiY29udmVydF8xIiwiZGF0YV9zb3VyY2VfMSIsIlBlcnNvbiIsIl9fZGVjb3JhdGUiLCJhc3NlcnQiLCJpc05hTiIsIm51bSIsImdlbmRlciIsIl9zdXBlciIsIl90aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfX2V4dGVuZHMiLCJCYXNlIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImciLCJ3aW5kb3ciLCJfdmFsdWUiLCJjaXR5TmFtZSIsImludHJvIiwiQWRkcmVzcyIsImRhdGFTb3VyY2UxIiwicGVyc29uIiwibGFzdG5hbWUiLCJyZXN1bHQxIiwiZnVsbE5hbWUiLCJyZXN1bHQyIiwibG9nIl0sIm1hcHBpbmdzIjoiNkRBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQTBEQSxPQXJEQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgs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QUFJdVQsRUFBYS9ELEVBQVEsQ0FBRWxPLE9BQVEsUUFBUzRCLGtCQUFrQixJQUUxRVEsR0FBVWdRLElBQ1YzUSxRQUFRMk0sT0FBT2hNLEVBQU9wRixPQUFTaVIsRUFBQXJQLFFBQVc1QixNQUFRb1YsRUFBUXBWLE9BQVNpVixFQUFZQyxPQUFPQyxTQUFVLGVBQ2hHMVEsUUFBUTJNLE9BQU9nRSxFQUFRdlQsTUFBUW9ULEVBQVluVCxJQUFJQyxPQUFRLGVBQ3ZEMEMsUUFBUTJNLFlBQXVCbE8sSUFBaEJvUyxFQUFRelQsSUFBbUIsZ0JBQzFDNEMsUUFBUThRLElBQUlEIiwiZmlsZSI6InRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gOSk7XG4iLCJpbXBvcnQgeyBtYXAsIG1hcHBpbmcgfSBmcm9tICcuL3NyYyc7XG5cbmV4cG9ydCB7IG1hcCwgbWFwcGluZyB9OyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnZmlzaGVyJyxcbiAgICBhZ2U6ICcxczInLFxuICAgIHNyYzogeyBudW1iZXI6ICcxMycgfSxcbiAgICBhZGRyZXNzOiB7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIGNpdHk6ICfljJfkuqwnLFxuICAgICAgICB6aXBfY29kZTogJzEwMDg2JyxcbiAgICB9LFxuICAgIGFkZHJlc3MxOiBbe1xuICAgICAgICBpZDogJzEnLFxuICAgICAgICBjaXR5OiAn5YyX5LqsJyxcbiAgICAgICAgemlwX2NvZGU6ICcxMDA4NicsXG4gICAgICAgIGFsaWFzOiBbJ+S6rOWfjicsICfljJflubMnXSxcbiAgICAgICAgb3RoZXI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6ICdrZXknLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH1dLFxuICAgIGRhdGU6ICdzZnNkZicsXG4gICAgZGF0ZXM6IFtEYXRlKCldLFxuICAgIHN0YXRpY1Byb3A6ICcxMjMnXG59IiwiZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJPUEVSVFlfU09VUkNFID0gJ2RlZmF1bHQnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJPUEVSVFlfU0VQID0gJy4nO1xuZXhwb3J0IGNvbnN0IFBST1BFUlRJRVNfS0VZID0gU3ltYm9sKCdQUk9QRVJUSUVTX0tFWScpO1xuZXhwb3J0IGNvbnN0IENVUlJFTlRfUEFUSCA9ICcuJzsiLCJleHBvcnQgZnVuY3Rpb24gdmFsaWRBc3NpZ24oc291cmNlOiBhbnksIGRlc3Q6IGFueSkge1xuICAgIHNvdXJjZSA9IHNvdXJjZSB8fCB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkZXN0KSB7XG4gICAgICAgIGlmIChkZXN0W2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc291cmNlW2tleV0gPSBkZXN0W2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1c2hCeU9yZGVyPFQ+KGFycmF5OiBUW10sIGl0ZW06IFQsIHNlbGVjdG9yOiAoaXRlbTogVCkgPT4gYW55KSB7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChzZWxlY3RvcihpdGVtKSA8IHNlbGVjdG9yKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDAsIGl0ZW0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheS5wdXNoKGl0ZW0pO1xufVxuIiwiaW1wb3J0IHsgUHJvcGVydHlUeXBlLCBJTWFwcGluZ09wdGlvbnMsIElDb252ZXJ0ZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2VcIjtcbmltcG9ydCB7IERFRkFVTFRfUFJPUEVSVFlfU09VUkNFLCBQUk9QRVJUSUVTX0tFWSB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgUHJvcGVydHkgfSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHsgcHVzaEJ5T3JkZXIgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5jb25zdCBTWVNURU1fVFlQRVM6IEFycmF5PFByb3BlcnR5VHlwZTxhbnk+PiA9IFtTdHJpbmcsIEJvb2xlYW4sIE51bWJlciwgRGF0ZV07XG5cbmNvbnN0IFNZU1RFTV9DT05WRVJURVJTOiBBcnJheTxJQ29udmVydGVyPGFueT4+ID0gW1xuICAodmFsdWUpID0+IHZhbHVlICYmIFN0cmluZyh2YWx1ZSksXG4gICh2YWx1ZSkgPT4gQm9vbGVhbih2YWx1ZSksXG4gICh2YWx1ZSkgPT4gTnVtYmVyKHZhbHVlKSxcbiAgKHZhbHVlKSA9PiB2YWx1ZSAmJiBuZXcgRGF0ZSh2YWx1ZSksXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udmVydGVyPFQ+KHR5cGU/OiBQcm9wZXJ0eVR5cGU8VD4pOiBJQ29udmVydGVyPFQ+IHtcbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKFBST1BFUlRJRVNfS0VZIGluIHR5cGUucHJvdG90eXBlKSB7XG4gICAgICByZXR1cm4gKHZhbHVlOiBhbnksIF9zcmM6IGFueSwgX2Rlc3Q6IFQsIG9wdGlvbnM/OiBJTWFwcGluZ09wdGlvbnMpID0+IG1hcCh2YWx1ZSwgdHlwZSBhcyBhbnksIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbmRleCA9IFNZU1RFTV9UWVBFUy5pbmRleE9mKHR5cGUpO1xuICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICByZXR1cm4gU1lTVEVNX0NPTlZFUlRFUlNbaW5kZXhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHR5cGUgYXMgYW55O1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHZhbHVlOiBhbnkpID0+IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFByb3BlcnRpZXM8VD4oY29uc3R1Y3RvcjogYW55LCBvcHRpb25zPzogSU1hcHBpbmdPcHRpb25zKSB7XG4gIGNvbnN0IHNvdXJjZU5hbWUgPSBvcHRpb25zICYmIG9wdGlvbnMuc291cmNlIHx8IERFRkFVTFRfUFJPUEVSVFlfU09VUkNFO1xuICBjb25zdCBwcm9wZXJ0aWVzOiBSZWNvcmQ8c3RyaW5nLCBBcnJheTxQcm9wZXJ0eTxUPj4+ID0gY29uc3R1Y3Rvci5wcm90b3R5cGVbUFJPUEVSVElFU19LRVldO1xuICBpZiAoIXByb3BlcnRpZXMgfHwgIShzb3VyY2VOYW1lIGluIHByb3BlcnRpZXMpKSB7XG4gICAgY29uc29sZS53YXJuKGBUaGUgdHlwZSAke2NvbnN0dWN0b3IubmFtZX0gaGFzIG5vIG1hcHBpbmcgYW5ub3RhdGlvbiBkZWNsYXJlZC5gKTtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgbGV0IGRlZmF1bHRQcm9wZXJ0aWVzID0gcHJvcGVydGllc1tERUZBVUxUX1BST1BFUlRZX1NPVVJDRV07XG4gIGlmIChzb3VyY2VOYW1lICE9PSBERUZBVUxUX1BST1BFUlRZX1NPVVJDRSkge1xuICAgIGNvbnN0IHVzZURlZmF1bHRTb3VyY2UgPSAob3B0aW9ucyAmJiBvcHRpb25zLnVzZURlZmF1bHRTb3VyY2UpICE9PSBmYWxzZTtcbiAgICBpZiAodXNlRGVmYXVsdFNvdXJjZSAmJiBBcnJheS5pc0FycmF5KGRlZmF1bHRQcm9wZXJ0aWVzKSkge1xuICAgICAgZGVmYXVsdFByb3BlcnRpZXMgPSBkZWZhdWx0UHJvcGVydGllcy5zbGljZSgpO1xuICAgICAgcHJvcGVydGllc1tzb3VyY2VOYW1lXS5mb3JFYWNoKHAgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGRlZmF1bHRQcm9wZXJ0aWVzLmZpbmRJbmRleChtID0+IHAubmFtZSA9PT0gbS5uYW1lKTtcbiAgICAgICAgfmluZGV4ICYmIGRlZmF1bHRQcm9wZXJ0aWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHB1c2hCeU9yZGVyKGRlZmF1bHRQcm9wZXJ0aWVzLCBwLCBwID0+IHAub3JkZXIpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzW3NvdXJjZU5hbWVdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmYXVsdFByb3BlcnRpZXM7XG59XG5cbi8qKlxuICogTWFwIGFuIG9iamVjdCB0byBhbiBpbnN0YW5jZSBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gKiBAcGFyYW0gc3JjIERhdGEgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSBjb25zdHVjdG9yIFRoZSB0eXBlIG9mIGluc3RhbmNlLCB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gb2YgdGhlIGNsYXNzLlxuICogQHBhcmFtIG9wdGlvbnMgTWFwcGluZyBvcHRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwPFQgZXh0ZW5kcyBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+XG4gIChzcmM6IGFueSwgY29uc3R1Y3RvcjogVCwgb3B0aW9ucz86IElNYXBwaW5nT3B0aW9ucyk6IEluc3RhbmNlVHlwZTxUPiB8IG51bGwge1xuICBpZiAoc3JjID09PSB1bmRlZmluZWQgfHwgc3JjID09PSBudWxsIHx8IHR5cGVvZiBzcmMgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgaW5zdGFuY2UgPSBuZXcgY29uc3R1Y3RvcigpO1xuICBjb25zdCBwcm9wZXJ0aWVzID0gZ2V0UHJvcGVydGllcyhjb25zdHVjdG9yLCBvcHRpb25zKTtcbiAgcHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcHJvcGVydHkucmVzb2x2ZVBhdGgoc3JjKTtcbiAgICAgIHJlc3VsdCA9IHByb3BlcnR5LmNvbnZlcnQodmFsdWUsIHNyYywgaW5zdGFuY2UsIG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGluc3RhbmNlLCB7IFtwcm9wZXJ0eS5uYW1lXTogcmVzdWx0IH0pO1xuICAgIH0gZWxzZSBpZiAocHJvcGVydHkuZGVmYXVsdCkge1xuICAgICAgT2JqZWN0LmFzc2lnbihpbnN0YW5jZSwgeyBbcHJvcGVydHkubmFtZV06IHByb3BlcnR5LmRlZmF1bHQgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKEMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxuXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG52YXIgUmVmbGVjdDtcbihmdW5jdGlvbiAoUmVmbGVjdCkge1xuICAgIC8vIE1ldGFkYXRhIFByb3Bvc2FsXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS9cbiAgICAoZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6XG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMgPT09IFwib2JqZWN0XCIgPyB0aGlzIDpcbiAgICAgICAgICAgICAgICAgICAgRnVuY3Rpb24oXCJyZXR1cm4gdGhpcztcIikoKTtcbiAgICAgICAgdmFyIGV4cG9ydGVyID0gbWFrZUV4cG9ydGVyKFJlZmxlY3QpO1xuICAgICAgICBpZiAodHlwZW9mIHJvb3QuUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcm9vdC5SZWZsZWN0ID0gUmVmbGVjdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4cG9ydGVyID0gbWFrZUV4cG9ydGVyKHJvb3QuUmVmbGVjdCwgZXhwb3J0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZhY3RvcnkoZXhwb3J0ZXIpO1xuICAgICAgICBmdW5jdGlvbiBtYWtlRXhwb3J0ZXIodGFyZ2V0LCBwcmV2aW91cykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgeyBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2aW91cylcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSkoZnVuY3Rpb24gKGV4cG9ydGVyKSB7XG4gICAgICAgIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAgICAgICAvLyBmZWF0dXJlIHRlc3QgZm9yIFN5bWJvbCBzdXBwb3J0XG4gICAgICAgIHZhciBzdXBwb3J0c1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgdmFyIHRvUHJpbWl0aXZlU3ltYm9sID0gc3VwcG9ydHNTeW1ib2wgJiYgdHlwZW9mIFN5bWJvbC50b1ByaW1pdGl2ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbC50b1ByaW1pdGl2ZSA6IFwiQEB0b1ByaW1pdGl2ZVwiO1xuICAgICAgICB2YXIgaXRlcmF0b3JTeW1ib2wgPSBzdXBwb3J0c1N5bWJvbCAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLml0ZXJhdG9yIDogXCJAQGl0ZXJhdG9yXCI7XG4gICAgICAgIHZhciBzdXBwb3J0c0NyZWF0ZSA9IHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSBcImZ1bmN0aW9uXCI7IC8vIGZlYXR1cmUgdGVzdCBmb3IgT2JqZWN0LmNyZWF0ZSBzdXBwb3J0XG4gICAgICAgIHZhciBzdXBwb3J0c1Byb3RvID0geyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheTsgLy8gZmVhdHVyZSB0ZXN0IGZvciBfX3Byb3RvX18gc3VwcG9ydFxuICAgICAgICB2YXIgZG93bkxldmVsID0gIXN1cHBvcnRzQ3JlYXRlICYmICFzdXBwb3J0c1Byb3RvO1xuICAgICAgICB2YXIgSGFzaE1hcCA9IHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBvYmplY3QgaW4gZGljdGlvbmFyeSBtb2RlIChhLmsuYS4gXCJzbG93XCIgbW9kZSBpbiB2OClcbiAgICAgICAgICAgIGNyZWF0ZTogc3VwcG9ydHNDcmVhdGVcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KE9iamVjdC5jcmVhdGUobnVsbCkpOyB9XG4gICAgICAgICAgICAgICAgOiBzdXBwb3J0c1Byb3RvXG4gICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFrZURpY3Rpb25hcnkoeyBfX3Byb3RvX186IG51bGwgfSk7IH1cbiAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeSh7fSk7IH0sXG4gICAgICAgICAgICBoYXM6IGRvd25MZXZlbFxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBoYXNPd24uY2FsbChtYXAsIGtleSk7IH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4ga2V5IGluIG1hcDsgfSxcbiAgICAgICAgICAgIGdldDogZG93bkxldmVsXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIGhhc093bi5jYWxsKG1hcCwga2V5KSA/IG1hcFtrZXldIDogdW5kZWZpbmVkOyB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIG1hcFtrZXldOyB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyBMb2FkIGdsb2JhbCBvciBzaGltIHZlcnNpb25zIG9mIE1hcCwgU2V0LCBhbmQgV2Vha01hcFxuICAgICAgICB2YXIgZnVuY3Rpb25Qcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRnVuY3Rpb24pO1xuICAgICAgICB2YXIgdXNlUG9seWZpbGwgPSB0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudltcIlJFRkxFQ1RfTUVUQURBVEFfVVNFX01BUF9QT0xZRklMTFwiXSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIHZhciBfTWFwID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgTWFwLnByb3RvdHlwZS5lbnRyaWVzID09PSBcImZ1bmN0aW9uXCIgPyBNYXAgOiBDcmVhdGVNYXBQb2x5ZmlsbCgpO1xuICAgICAgICB2YXIgX1NldCA9ICF1c2VQb2x5ZmlsbCAmJiB0eXBlb2YgU2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUuZW50cmllcyA9PT0gXCJmdW5jdGlvblwiID8gU2V0IDogQ3JlYXRlU2V0UG9seWZpbGwoKTtcbiAgICAgICAgdmFyIF9XZWFrTWFwID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBXZWFrTWFwID09PSBcImZ1bmN0aW9uXCIgPyBXZWFrTWFwIDogQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCk7XG4gICAgICAgIC8vIFtbTWV0YWRhdGFdXSBpbnRlcm5hbCBzbG90XG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5LW9iamVjdC1pbnRlcm5hbC1tZXRob2RzLWFuZC1pbnRlcm5hbC1zbG90c1xuICAgICAgICB2YXIgTWV0YWRhdGEgPSBuZXcgX1dlYWtNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGxpZXMgYSBzZXQgb2YgZGVjb3JhdG9ycyB0byBhIHByb3BlcnR5IG9mIGEgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIGRlY29yYXRvcnMgQW4gYXJyYXkgb2YgZGVjb3JhdG9ycy5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSB0byBkZWNvcmF0ZS5cbiAgICAgICAgICogQHBhcmFtIGF0dHJpYnV0ZXMgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgdGhlIHRhcmdldCBrZXkuXG4gICAgICAgICAqIEByZW1hcmtzIERlY29yYXRvcnMgYXJlIGFwcGxpZWQgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgRXhhbXBsZSA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIixcbiAgICAgICAgICogICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIixcbiAgICAgICAgICogICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKSkpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKSkpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzQXJyYXkoZGVjb3JhdG9ycykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KGF0dHJpYnV0ZXMpICYmICFJc1VuZGVmaW5lZChhdHRyaWJ1dGVzKSAmJiAhSXNOdWxsKGF0dHJpYnV0ZXMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKElzTnVsbChhdHRyaWJ1dGVzKSlcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvcmF0ZVByb3BlcnR5KGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0FycmF5KGRlY29yYXRvcnMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0NvbnN0cnVjdG9yKHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVjb3JhdGVDb25zdHJ1Y3RvcihkZWNvcmF0b3JzLCB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZGVjb3JhdGVcIiwgZGVjb3JhdGUpO1xuICAgICAgICAvLyA0LjEuMiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNyZWZsZWN0Lm1ldGFkYXRhXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRlZmF1bHQgbWV0YWRhdGEgZGVjb3JhdG9yIGZhY3RvcnkgdGhhdCBjYW4gYmUgdXNlZCBvbiBhIGNsYXNzLCBjbGFzcyBtZW1iZXIsIG9yIHBhcmFtZXRlci5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IFRoZSBrZXkgZm9yIHRoZSBtZXRhZGF0YSBlbnRyeS5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhVmFsdWUgVGhlIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEgZW50cnkuXG4gICAgICAgICAqIEByZXR1cm5zIEEgZGVjb3JhdG9yIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBJZiBgbWV0YWRhdGFLZXlgIGlzIGFscmVhZHkgZGVmaW5lZCBmb3IgdGhlIHRhcmdldCBhbmQgdGFyZ2V0IGtleSwgdGhlXG4gICAgICAgICAqIG1ldGFkYXRhVmFsdWUgZm9yIHRoYXQga2V5IHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yLCBUeXBlU2NyaXB0IG9ubHkpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUsIFR5cGVTY3JpcHQgb25seSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgcHJvcGVydHk7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSAmJiAhSXNQcm9wZXJ0eUtleShwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJtZXRhZGF0YVwiLCBtZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgYSB1bmlxdWUgbWV0YWRhdGEgZW50cnkgb24gdGhlIHRhcmdldC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFWYWx1ZSBBIHZhbHVlIHRoYXQgY29udGFpbnMgYXR0YWNoZWQgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdG8gZGVmaW5lIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gZGVjb3JhdG9yIGZhY3RvcnkgYXMgbWV0YWRhdGEtcHJvZHVjaW5nIGFubm90YXRpb24uXG4gICAgICAgICAqICAgICBmdW5jdGlvbiBNeUFubm90YXRpb24ob3B0aW9ucyk6IERlY29yYXRvciB7XG4gICAgICAgICAqICAgICAgICAgcmV0dXJuICh0YXJnZXQsIGtleT8pID0+IFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCB0YXJnZXQsIGtleSk7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJkZWZpbmVNZXRhZGF0YVwiLCBkZWZpbmVNZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4gaGFzIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGtleSB3YXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluOyBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJoYXNNZXRhZGF0YVwiLCBoYXNNZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB0YXJnZXQgb2JqZWN0IGhhcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBtZXRhZGF0YSBrZXkgd2FzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Q7IG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImhhc093bk1ldGFkYXRhXCIsIGhhc093bk1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgVGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEga2V5IGlmIGZvdW5kOyBvdGhlcndpc2UsIGB1bmRlZmluZWRgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0TWV0YWRhdGFcIiwgZ2V0TWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgb24gdGhlIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgVGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEga2V5IGlmIGZvdW5kOyBvdGhlcndpc2UsIGB1bmRlZmluZWRgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0T3duTWV0YWRhdGFcIiwgZ2V0T3duTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEga2V5cyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHVuaXF1ZSBtZXRhZGF0YSBrZXlzLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeU1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE1ldGFkYXRhS2V5c1wiLCBnZXRNZXRhZGF0YUtleXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgdW5pcXVlIG1ldGFkYXRhIGtleXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdW5pcXVlIG1ldGFkYXRhIGtleXMuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0T3duTWV0YWRhdGFLZXlzXCIsIGdldE93bk1ldGFkYXRhS2V5cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWxldGVzIHRoZSBtZXRhZGF0YSBlbnRyeSBmcm9tIHRoZSB0YXJnZXQgb2JqZWN0IHdpdGggdGhlIHByb3ZpZGVkIGtleS5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGVudHJ5IHdhcyBmb3VuZCBhbmQgZGVsZXRlZDsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghbWV0YWRhdGFNYXAuZGVsZXRlKG1ldGFkYXRhS2V5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGFNYXAuc2l6ZSA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBNZXRhZGF0YS5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhLmRlbGV0ZShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0TWV0YWRhdGEuc2l6ZSA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBNZXRhZGF0YS5kZWxldGUodGFyZ2V0KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZGVsZXRlTWV0YWRhdGFcIiwgZGVsZXRlTWV0YWRhdGEpO1xuICAgICAgICBmdW5jdGlvbiBEZWNvcmF0ZUNvbnN0cnVjdG9yKGRlY29yYXRvcnMsIHRhcmdldCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdG9yID0gZGVjb3JhdG9yc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdGVkID0gZGVjb3JhdG9yKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChkZWNvcmF0ZWQpICYmICFJc051bGwoZGVjb3JhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzQ29uc3RydWN0b3IoZGVjb3JhdGVkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gZGVjb3JhdGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gRGVjb3JhdGVQcm9wZXJ0eShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0ZWQgPSBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChkZWNvcmF0ZWQpICYmICFJc051bGwoZGVjb3JhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KGRlY29yYXRlZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBkZWNvcmF0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBDcmVhdGUpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IE1ldGFkYXRhLmdldChPKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZCh0YXJnZXRNZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0YXJnZXRNZXRhZGF0YSA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgTWV0YWRhdGEuc2V0KE8sIHRhcmdldE1ldGFkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IHRhcmdldE1ldGFkYXRhLmdldChQKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YU1hcCA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEuc2V0KFAsIG1ldGFkYXRhTWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YU1hcDtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMS4xIE9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5aGFzbWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIGhhc093biA9IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICAgICAgICAgICAgaWYgKGhhc093bilcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKCFJc051bGwocGFyZW50KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMi4xIE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5aGFzb3dubWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIFRvQm9vbGVhbihtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMy4xIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5Z2V0bWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIGhhc093biA9IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICAgICAgICAgICAgaWYgKGhhc093bilcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmICghSXNOdWxsKHBhcmVudCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS40LjEgT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlnZXRvd25tZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjUuMSBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWRlZmluZW93bm1ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyB0cnVlKTtcbiAgICAgICAgICAgIG1ldGFkYXRhTWFwLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjYuMSBPcmRpbmFyeU1ldGFkYXRhS2V5cyhPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeW1ldGFkYXRha2V5c1xuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeU1ldGFkYXRhS2V5cyhPLCBQKSB7XG4gICAgICAgICAgICB2YXIgb3duS2V5cyA9IE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAocGFyZW50ID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBvd25LZXlzO1xuICAgICAgICAgICAgdmFyIHBhcmVudEtleXMgPSBPcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICAgICAgICAgICAgaWYgKHBhcmVudEtleXMubGVuZ3RoIDw9IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG93bktleXM7XG4gICAgICAgICAgICBpZiAob3duS2V5cy5sZW5ndGggPD0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50S2V5cztcbiAgICAgICAgICAgIHZhciBzZXQgPSBuZXcgX1NldCgpO1xuICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgb3duS2V5c18xID0gb3duS2V5czsgX2kgPCBvd25LZXlzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IG93bktleXNfMVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIGhhc0tleSA9IHNldC5oYXMoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0tleSkge1xuICAgICAgICAgICAgICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgcGFyZW50S2V5c18xID0gcGFyZW50S2V5czsgX2EgPCBwYXJlbnRLZXlzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhcmVudEtleXNfMVtfYV07XG4gICAgICAgICAgICAgICAgdmFyIGhhc0tleSA9IHNldC5oYXMoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0tleSkge1xuICAgICAgICAgICAgICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS43LjEgT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlvd25tZXRhZGF0YWtleXNcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgICAgdmFyIGtleXNPYmogPSBtZXRhZGF0YU1hcC5rZXlzKCk7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBHZXRJdGVyYXRvcihrZXlzT2JqKTtcbiAgICAgICAgICAgIHZhciBrID0gMDtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzLmxlbmd0aCA9IGs7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV4dFZhbHVlID0gSXRlcmF0b3JWYWx1ZShuZXh0KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzW2tdID0gbmV4dFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA2IEVDTUFTY3JpcHQgRGF0YSBUeXAwZXMgYW5kIFZhbHVlc1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWRhdGEtdHlwZXMtYW5kLXZhbHVlc1xuICAgICAgICBmdW5jdGlvbiBUeXBlKHgpIHtcbiAgICAgICAgICAgIGlmICh4ID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiAxIC8qIE51bGwgKi87XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiByZXR1cm4gMCAvKiBVbmRlZmluZWQgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjogcmV0dXJuIDIgLyogQm9vbGVhbiAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6IHJldHVybiAzIC8qIFN0cmluZyAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3ltYm9sXCI6IHJldHVybiA0IC8qIFN5bWJvbCAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6IHJldHVybiA1IC8qIE51bWJlciAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6IHJldHVybiB4ID09PSBudWxsID8gMSAvKiBOdWxsICovIDogNiAvKiBPYmplY3QgKi87XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDYgLyogT2JqZWN0ICovO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS4xIFRoZSBVbmRlZmluZWQgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLXVuZGVmaW5lZC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzVW5kZWZpbmVkKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjIgVGhlIE51bGwgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLW51bGwtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc051bGwoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHggPT09IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjUgVGhlIFN5bWJvbCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtc3ltYm9sLXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNTeW1ib2woeCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS43IFRoZSBPYmplY3QgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc09iamVjdCh4KSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwib2JqZWN0XCIgPyB4ICE9PSBudWxsIDogdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEgVHlwZSBDb252ZXJzaW9uXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGUtY29udmVyc2lvblxuICAgICAgICAvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbiAgICAgICAgZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQsIFByZWZlcnJlZFR5cGUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoVHlwZShpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDAgLyogVW5kZWZpbmVkICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIE51bGwgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDIgLyogQm9vbGVhbiAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBTdHJpbmcgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDQgLyogU3ltYm9sICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSA1IC8qIE51bWJlciAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhpbnQgPSBQcmVmZXJyZWRUeXBlID09PSAzIC8qIFN0cmluZyAqLyA/IFwic3RyaW5nXCIgOiBQcmVmZXJyZWRUeXBlID09PSA1IC8qIE51bWJlciAqLyA/IFwibnVtYmVyXCIgOiBcImRlZmF1bHRcIjtcbiAgICAgICAgICAgIHZhciBleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIHRvUHJpbWl0aXZlU3ltYm9sKTtcbiAgICAgICAgICAgIGlmIChleG90aWNUb1ByaW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgaGludCk7XG4gICAgICAgICAgICAgICAgaWYgKElzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09IFwiZGVmYXVsdFwiID8gXCJudW1iZXJcIiA6IGhpbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4xLjEgT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludCkge1xuICAgICAgICAgICAgaWYgKGhpbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9TdHJpbmdfMSA9IE8udG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodG9TdHJpbmdfMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvU3RyaW5nXzEuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlT2YgPSBPLnZhbHVlT2Y7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodmFsdWVPZikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlT2YuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZiA9IE8udmFsdWVPZjtcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh2YWx1ZU9mKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsdWVPZi5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdG9TdHJpbmdfMiA9IE8udG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodG9TdHJpbmdfMikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvU3RyaW5nXzIuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjIgVG9Cb29sZWFuKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvMjAxNi8jc2VjLXRvYm9vbGVhblxuICAgICAgICBmdW5jdGlvbiBUb0Jvb2xlYW4oYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWFyZ3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4xMiBUb1N0cmluZyhhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9zdHJpbmdcbiAgICAgICAgZnVuY3Rpb24gVG9TdHJpbmcoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgYXJndW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjE0IFRvUHJvcGVydHlLZXkoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbiAgICAgICAgZnVuY3Rpb24gVG9Qcm9wZXJ0eUtleShhcmd1bWVudCkge1xuICAgICAgICAgICAgdmFyIGtleSA9IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAzIC8qIFN0cmluZyAqLyk7XG4gICAgICAgICAgICBpZiAoSXNTeW1ib2woa2V5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgcmV0dXJuIFRvU3RyaW5nKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yIFRlc3RpbmcgYW5kIENvbXBhcmlzb24gT3BlcmF0aW9uc1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10ZXN0aW5nLWFuZC1jb21wYXJpc29uLW9wZXJhdGlvbnNcbiAgICAgICAgLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNhcnJheVxuICAgICAgICBmdW5jdGlvbiBJc0FycmF5KGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheVxuICAgICAgICAgICAgICAgID8gQXJyYXkuaXNBcnJheShhcmd1bWVudClcbiAgICAgICAgICAgICAgICA6IGFyZ3VtZW50IGluc3RhbmNlb2YgT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgID8gYXJndW1lbnQgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgICAgICAgICAgICA6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIuMyBJc0NhbGxhYmxlKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG4gICAgICAgIGZ1bmN0aW9uIElzQ2FsbGFibGUoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYW4gYXBwcm94aW1hdGlvbiBhcyB3ZSBjYW5ub3QgY2hlY2sgZm9yIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIuNCBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG4gICAgICAgIGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYW4gYXBwcm94aW1hdGlvbiBhcyB3ZSBjYW5ub3QgY2hlY2sgZm9yIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMi43IElzUHJvcGVydHlLZXkoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzcHJvcGVydHlrZXlcbiAgICAgICAgZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xuICAgICAgICAgICAgc3dpdGNoIChUeXBlKGFyZ3VtZW50KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBTdHJpbmcgKi86IHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNCAvKiBTeW1ib2wgKi86IHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA3LjMgT3BlcmF0aW9ucyBvbiBPYmplY3RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9wZXJhdGlvbnMtb24tb2JqZWN0c1xuICAgICAgICAvLyA3LjMuOSBHZXRNZXRob2QoViwgUClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG4gICAgICAgIGZ1bmN0aW9uIEdldE1ldGhvZChWLCBQKSB7XG4gICAgICAgICAgICB2YXIgZnVuYyA9IFZbUF07XG4gICAgICAgICAgICBpZiAoZnVuYyA9PT0gdW5kZWZpbmVkIHx8IGZ1bmMgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICghSXNDYWxsYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQgT3BlcmF0aW9ucyBvbiBJdGVyYXRvciBPYmplY3RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9wZXJhdGlvbnMtb24taXRlcmF0b3Itb2JqZWN0c1xuICAgICAgICBmdW5jdGlvbiBHZXRJdGVyYXRvcihvYmopIHtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBHZXRNZXRob2Qob2JqLCBpdGVyYXRvclN5bWJvbCk7XG4gICAgICAgICAgICBpZiAoIUlzQ2FsbGFibGUobWV0aG9kKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7IC8vIGZyb20gQ2FsbFxuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbWV0aG9kLmNhbGwob2JqKTtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QoaXRlcmF0b3IpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQuNCBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8yMDE2LyNzZWMtaXRlcmF0b3J2YWx1ZVxuICAgICAgICBmdW5jdGlvbiBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyUmVzdWx0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNC41IEl0ZXJhdG9yU3RlcChpdGVyYXRvcilcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXRlcmF0b3JzdGVwXG4gICAgICAgIGZ1bmN0aW9uIEl0ZXJhdG9yU3RlcChpdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IGZhbHNlIDogcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yY2xvc2VcbiAgICAgICAgZnVuY3Rpb24gSXRlcmF0b3JDbG9zZShpdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIGYgPSBpdGVyYXRvcltcInJldHVyblwiXTtcbiAgICAgICAgICAgIGlmIChmKVxuICAgICAgICAgICAgICAgIGYuY2FsbChpdGVyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gOS4xIE9yZGluYXJ5IE9iamVjdCBJbnRlcm5hbCBNZXRob2RzIGFuZCBJbnRlcm5hbCBTbG90c1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeS1vYmplY3QtaW50ZXJuYWwtbWV0aG9kcy1hbmQtaW50ZXJuYWwtc2xvdHNcbiAgICAgICAgLy8gOS4xLjEuMSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5Z2V0cHJvdG90eXBlb2ZcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKSB7XG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIE8gIT09IFwiZnVuY3Rpb25cIiB8fCBPID09PSBmdW5jdGlvblByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBUeXBlU2NyaXB0IGRvZXNuJ3Qgc2V0IF9fcHJvdG9fXyBpbiBFUzUsIGFzIGl0J3Mgbm9uLXN0YW5kYXJkLlxuICAgICAgICAgICAgLy8gVHJ5IHRvIGRldGVybWluZSB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3Rvci4gQ29tcGF0aWJsZSBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgICAgIC8vIG11c3QgZWl0aGVyIHNldCBfX3Byb3RvX18gb24gYSBzdWJjbGFzcyBjb25zdHJ1Y3RvciB0byB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIC8vIG9yIGVuc3VyZSBlYWNoIGNsYXNzIGhhcyBhIHZhbGlkIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgb24gaXRzIHByb3RvdHlwZSB0aGF0XG4gICAgICAgICAgICAvLyBwb2ludHMgYmFjayB0byB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCB0aGUgc2FtZSBhcyBGdW5jdGlvbi5bW1Byb3RvdHlwZV1dLCB0aGVuIHRoaXMgaXMgZGVmaW5hdGVseSBpbmhlcml0ZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBjYXNlIHdoZW4gaW4gRVM2IG9yIHdoZW4gdXNpbmcgX19wcm90b19fIGluIGEgY29tcGF0aWJsZSBicm93c2VyLlxuICAgICAgICAgICAgaWYgKHByb3RvICE9PSBmdW5jdGlvblByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBJZiB0aGUgc3VwZXIgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGUsIG51bGwsIG9yIHVuZGVmaW5lZCwgdGhlbiB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBPLnByb3RvdHlwZTtcbiAgICAgICAgICAgIHZhciBwcm90b3R5cGVQcm90byA9IHByb3RvdHlwZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKTtcbiAgICAgICAgICAgIGlmIChwcm90b3R5cGVQcm90byA9PSBudWxsIHx8IHByb3RvdHlwZVByb3RvID09PSBPYmplY3QucHJvdG90eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIElmIHRoZSBjb25zdHJ1Y3RvciB3YXMgbm90IGEgZnVuY3Rpb24sIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICB2YXIgY29uc3RydWN0b3IgPSBwcm90b3R5cGVQcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RydWN0b3IgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIHNvbWUga2luZCBvZiBzZWxmLXJlZmVyZW5jZSwgdGhlbiB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIGlmIChjb25zdHJ1Y3RvciA9PT0gTylcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGEgcHJldHR5IGdvb2QgZ3Vlc3MgYXQgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5haXZlIE1hcCBzaGltXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZU1hcFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlU2VudGluZWwgPSB7fTtcbiAgICAgICAgICAgIHZhciBhcnJheVNlbnRpbmVsID0gW107XG4gICAgICAgICAgICB2YXIgTWFwSXRlcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTWFwSXRlcmF0b3Ioa2V5cywgdmFsdWVzLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9rZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3NlbGVjdG9yKHRoaXMuX2tleXNbaW5kZXhdLCB0aGlzLl92YWx1ZXNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCArIDEgPj0gdGhpcy5fa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdCwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUudGhyb3cgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUucmV0dXJuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hcEl0ZXJhdG9yO1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fa2V5cy5sZW5ndGg7IH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpID49IDA7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID49IDAgPyB0aGlzLl92YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuX2tleXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGluZGV4ICsgMTsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXNbaSAtIDFdID0gdGhpcy5fa2V5c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNbaSAtIDFdID0gdGhpcy5fdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5sZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IHRoaXMuX2NhY2hlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5ID0gY2FjaGVTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0yO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0S2V5KTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldFZhbHVlKTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRFbnRyeSk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVudHJpZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuX2ZpbmQgPSBmdW5jdGlvbiAoa2V5LCBpbnNlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlS2V5ICE9PSBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSB0aGlzLl9rZXlzLmluZGV4T2YodGhpcy5fY2FjaGVLZXkgPSBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZUluZGV4IDwgMCAmJiBpbnNlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSB0aGlzLl9rZXlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVJbmRleDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXA7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0S2V5KGtleSwgXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWYWx1ZShfLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVudHJ5KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tleSwgdmFsdWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG5haXZlIFNldCBzaGltXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZVNldFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBTZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcCA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXQucHJvdG90eXBlLCBcInNpemVcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5zaXplOyB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLmhhcyh2YWx1ZSk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5zZXQodmFsdWUsIHZhbHVlKSwgdGhpczsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLmRlbGV0ZSh2YWx1ZSk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fbWFwLmNsZWFyKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC52YWx1ZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXlzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V0O1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBuYWl2ZSBXZWFrTWFwIHNoaW1cbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgdmFyIFVVSURfU0laRSA9IDE2O1xuICAgICAgICAgICAgdmFyIGtleXMgPSBIYXNoTWFwLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdmFyIHJvb3RLZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5ID0gQ3JlYXRlVW5pcXVlS2V5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlICE9PSB1bmRlZmluZWQgPyBIYXNoTWFwLmhhcyh0YWJsZSwgdGhpcy5fa2V5KSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IEhhc2hNYXAuZ2V0KHRhYmxlLCB0aGlzLl9rZXkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0YWJsZVt0aGlzLl9rZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IGRlbGV0ZSB0YWJsZVt0aGlzLl9rZXldIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogbm90IGEgcmVhbCBjbGVhciwganVzdCBtYWtlcyB0aGUgcHJldmlvdXMgZGF0YSB1bnJlYWNoYWJsZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBXZWFrTWFwO1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZVVuaXF1ZUtleSgpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgICAgICAgIGRvXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IFwiQEBXZWFrTWFwQEBcIiArIENyZWF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoSGFzaE1hcC5oYXMoa2V5cywga2V5KSk7XG4gICAgICAgICAgICAgICAga2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCBjcmVhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093bi5jYWxsKHRhcmdldCwgcm9vdEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmVhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCByb290S2V5LCB7IHZhbHVlOiBIYXNoTWFwLmNyZWF0ZSgpIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Jvb3RLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gRmlsbFJhbmRvbUJ5dGVzKGJ1ZmZlciwgc2l6ZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKVxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbaV0gPSBNYXRoLnJhbmRvbSgpICogMHhmZiB8IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEdlblJhbmRvbUJ5dGVzKHNpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtc0NyeXB0byAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmlsbFJhbmRvbUJ5dGVzKG5ldyBVaW50OEFycmF5KHNpemUpLCBzaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZpbGxSYW5kb21CeXRlcyhuZXcgQXJyYXkoc2l6ZSksIHNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gQ3JlYXRlVVVJRCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEdlblJhbmRvbUJ5dGVzKFVVSURfU0laRSk7XG4gICAgICAgICAgICAgICAgLy8gbWFyayBhcyByYW5kb20gLSBSRkMgNDEyMiDCpyA0LjRcbiAgICAgICAgICAgICAgICBkYXRhWzZdID0gZGF0YVs2XSAmIDB4NGYgfCAweDQwO1xuICAgICAgICAgICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdICYgMHhiZiB8IDB4ODA7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgVVVJRF9TSVpFOyArK29mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnl0ZSA9IGRhdGFbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gNCB8fCBvZmZzZXQgPT09IDYgfHwgb2Zmc2V0ID09PSA4KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiLVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnl0ZSA8IDE2KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiMFwiO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gYnl0ZS50b1N0cmluZygxNikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB1c2VzIGEgaGV1cmlzdGljIHVzZWQgYnkgdjggYW5kIGNoYWtyYSB0byBmb3JjZSBhbiBvYmplY3QgaW50byBkaWN0aW9uYXJ5IG1vZGUuXG4gICAgICAgIGZ1bmN0aW9uIE1ha2VEaWN0aW9uYXJ5KG9iaikge1xuICAgICAgICAgICAgb2JqLl9fID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZGVsZXRlIG9iai5fXztcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKFJlZmxlY3QgfHwgKFJlZmxlY3QgPSB7fSkpO1xuIiwiaW1wb3J0IHsgbWFwcGluZyB9IGZyb20gJy4vYW5ub3RhdGlvbic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL2NvbnZlcnRlcic7XG5cbmV4cG9ydCB7IG1hcCwgbWFwcGluZyB9OyIsImltcG9ydCB7IElQcm9wZXJ0eSwgSUNvbnZlcnRlciB9IGZyb20gXCIuL2ludGVyZmFjZVwiO1xuaW1wb3J0IHsgUHJvcGVydHkgfSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHsgUFJPUEVSVElFU19LRVkgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IHB1c2hCeU9yZGVyIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogVGhlIHJlcXVpcmVkIGFubm90YXRpb25zIGZvciBvYmplY3QgbWFwcGluZyB3aGljaCBjYW4gb25seSBiZSB1c2VkIG9uIGluc3RhbmNlIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0gb3B0aW9ucyBtYXBwaW5nIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcHBpbmc8VCA9IGFueT4ob3B0aW9ucz86IElQcm9wZXJ0eTxUPiB8IElDb252ZXJ0ZXI8VD4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTWFwcGluZyBzdGF0aWMgbWVtYmVycyBpcyBub3QgYWxsb3dlZCwgaXQgaXMgYSBkYW5nZXJvdXMgb3BlcmF0aW9uLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdHM6IElQcm9wZXJ0eTxUPiA9IG9wdGlvbnMgfHwge30gYXMgYW55O1xuICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IFByb3BlcnR5LmZyb20ob3B0cywgdGFyZ2V0LCBuYW1lKTtcbiAgICAgICAgdGFyZ2V0W1BST1BFUlRJRVNfS0VZXSA9IHRhcmdldFtQUk9QRVJUSUVTX0tFWV0gfHwge307XG4gICAgICAgIHRhcmdldFtQUk9QRVJUSUVTX0tFWV1bcHJvcGVydHkuc291cmNlXSA9IHRhcmdldFtQUk9QRVJUSUVTX0tFWV1bcHJvcGVydHkuc291cmNlXSB8fCBbXTtcbiAgICAgICAgcHVzaEJ5T3JkZXIodGFyZ2V0W1BST1BFUlRJRVNfS0VZXVtwcm9wZXJ0eS5zb3VyY2VdLCBwcm9wZXJ0eSwgaXRlbSA9PiBpdGVtLm9yZGVyKTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgUHJvcGVydHlUeXBlLCBJUHJvcGVydHksIElNYXBwaW5nT3B0aW9ucyB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldENvbnZlcnRlciB9IGZyb20gJy4vY29udmVydGVyJztcbmltcG9ydCB7IERFRkFVTFRfUFJPUEVSVFlfU09VUkNFLCBERUZBVUxUX1BST1BFUlRZX1NFUCwgQ1VSUkVOVF9QQVRIIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgdmFsaWRBc3NpZ24gfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5PFQ+IGltcGxlbWVudHMgSVByb3BlcnR5PFQ+IHtcbiAgcGF0aDogc3RyaW5nO1xuICB0eXBlOiBQcm9wZXJ0eVR5cGU8VD47XG4gIHNlcGFyYXRvcjogc3RyaW5nID0gREVGQVVMVF9QUk9QRVJUWV9TRVA7XG4gIHNvdXJjZTogc3RyaW5nID0gREVGQVVMVF9QUk9QRVJUWV9TT1VSQ0U7XG4gIGRlZmF1bHQ6IGFueTtcbiAgb3JkZXI6IG51bWJlciA9IDA7XG4gIG5hbWU6IHN0cmluZztcblxuICBzdGF0aWMgZnJvbTxUPihvcHRpb25zOiBJUHJvcGVydHk8VD4sIHRhcmdldDogYW55LCBuYW1lOiBzdHJpbmcpIHtcbiAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicgPyB7IHR5cGU6IG9wdGlvbnMgfSA6IG9wdGlvbnM7XG4gICAgY29uc3QgcHJvcGVydHkgPSBuZXcgUHJvcGVydHkoKTtcbiAgICBwcm9wZXJ0eS5uYW1lID0gbmFtZTtcbiAgICB2YWxpZEFzc2lnbihwcm9wZXJ0eSwgb3B0aW9ucyk7XG4gICAgcHJvcGVydHkucGF0aCA9IHByb3BlcnR5LnBhdGggfHwgbmFtZTtcbiAgICBpZiAoIXByb3BlcnR5LnR5cGUgJiYgUmVmbGVjdCAmJiAnZ2V0TWV0YWRhdGEnIGluIFJlZmxlY3QpIHtcbiAgICAgIGNvbnN0IGRlc2lnblR5cGUgPSAoUmVmbGVjdCBhcyBhbnkpLmdldE1ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgdGFyZ2V0LCBuYW1lKTtcbiAgICAgIHByb3BlcnR5LnR5cGUgPSBkZXNpZ25UeXBlID09PSBBcnJheSA/IFtdIDogZGVzaWduVHlwZTtcbiAgICB9XG4gICAgaWYgKCFwcm9wZXJ0eS50eXBlKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFRoZSBwcm9wZXJ5ICR7bmFtZX0gbWlzc2luZyAndHlwZScgb3B0aW9uIGFuZCBpdCB3aWxsIGJlIHRyZWF0ZWQgYXMgYW55LCBgICtcbiAgICAgICAgYHlvdSBjYW4gaW1wb3J0IG1vZHVsZSAncmVmbGVjdC1tZXRhZGF0YScgdG8gZ2V0IHR5cGVzIGF1dG9tYXRpY2FsbHlgKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocHJvcGVydHkudHlwZSkgJiYgcHJvcGVydHkudHlwZS5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUud2FybihgVGhlIHByb3BlcnkgJHtuYW1lfSBtaXNzaW5nIHR5cGUgZGVjbGFyYXRpb24gYW5kIGl0IHdpbGwgdHJlYXRlZCBhcyBhbnlbXWApO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICByZXNvbHZlUGF0aChzcmM6IGFueSkge1xuICAgIGlmICghc3JjKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGlmICh0aGlzLnBhdGggPT09IENVUlJFTlRfUEFUSCkgcmV0dXJuIHNyYztcbiAgICBjb25zdCBwYXRoZXMgPSB0aGlzLnBhdGguc3BsaXQodGhpcy5zZXBhcmF0b3IpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gcGF0aGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IHBhdGggPSBwYXRoZXNbaW5kZXhdO1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHBhdGgubWF0Y2goL14oLispXFxbKFxcZClcXF0kLyk7XG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBjb25zdCBbLCBuYW1lLCBpbmRleF0gPSBtYXRjaGVzO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzcmNbbmFtZV0pICYmIHNyY1tuYW1lXS5sZW5ndGggPiBpbmRleCkge1xuICAgICAgICAgIHNyYyA9IHNyY1tuYW1lXVtpbmRleF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXRoIGluIHNyYykge1xuICAgICAgICAgIHNyYyA9IHNyY1twYXRoXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXggPT09IGxlbmd0aCA/IHNyYyA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnZlcnQodmFsdWU6IGFueSwgc3JjOiBhbnksIGRlc3Q6IFQsIG9wdGlvbnM/OiBJTWFwcGluZ09wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnR5cGUpKSB7XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHZhbHVlO1xuICAgICAgY29uc3QgY29udmVydCA9IGdldENvbnZlcnRlcih0aGlzLnR5cGVbMF0pO1xuICAgICAgdmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICAgIHZhbHVlID0gdmFsdWUubWFwKChpdGVtOiBhbnkpID0+IGNvbnZlcnQoaXRlbSwgc3JjLCBkZXN0LCBvcHRpb25zKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNvbnZlcnQgPSBnZXRDb252ZXJ0ZXIodGhpcy50eXBlKTtcbiAgICAgIHZhbHVlID0gY29udmVydCh2YWx1ZSwgc3JjLCBkZXN0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4iLCJpbXBvcnQgJy4vbm8tcmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgJy4vcmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgJy4vY29udmVydGVyJztcbmltcG9ydCAnLi9wdWxsLWRhdGEnO1xuaW1wb3J0ICcuL2N1c3RvbS1jbGFzcyc7XG5pbXBvcnQgJy4vYXJyYXknO1xuaW1wb3J0ICcuL211bHRpLWRhdGEtc291cmNlJztcbmltcG9ydCAnLi9vcmRlcic7XG5pbXBvcnQgJy4vdXNlLWRlZmF1bHQtc291cmNlJzsiLCJpbXBvcnQgeyBtYXBwaW5nLCBtYXAgfSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgZGF0YVNvdXJjZSBmcm9tICcuL2RhdGEtc291cmNlJztcblxuY2xhc3MgUGVyc29uIHtcbiAgICBAbWFwcGluZyh7IHR5cGU6IFN0cmluZyB9KVxuICAgIG5hbWU6IHN0cmluZztcbiAgICBAbWFwcGluZyh7IHR5cGU6IEJvb2xlYW4gfSlcbiAgICBnZW5kZXI6IGJvb2xlYW47XG4gICAgQG1hcHBpbmcoeyB0eXBlOiBOdW1iZXIgfSlcbiAgICBhZ2U6IG51bWJlciA9IDE7XG4gICAgQG1hcHBpbmcoeyBwYXRoOiAnc3JjLm51bWJlcicsIHR5cGU6IE51bWJlciB9KVxuICAgIG51bTogbnVtYmVyXG59XG5jb25zdCByZXN1bHQgPSBtYXAoZGF0YVNvdXJjZSwgUGVyc29uKTtcblxuaWYgKHJlc3VsdCkge1xuICAgIGNvbnNvbGUuYXNzZXJ0KHJlc3VsdC5uYW1lID09PSBkYXRhU291cmNlLm5hbWUsICfmma7pgJrlsZ7mgKfojrflj5blpLHotKUnKTtcbiAgICBjb25zb2xlLmFzc2VydChpc05hTihyZXN1bHQuYWdlKSwgJ+aZrumAmuexu+Wei+i9rOaNouWksei0pScpO1xuICAgIGNvbnNvbGUuYXNzZXJ0KCEhcmVzdWx0Lm51bSwgJ+aLieWPluWvueixoeWksei0pScpO1xuICAgIGNvbnNvbGUuYXNzZXJ0KHJlc3VsdC5udW0gPT09ICtkYXRhU291cmNlLnNyYy5udW1iZXIsICfmma7pgJrnsbvlnovovazmjaLlpLHotKUnKTtcbiAgICBjb25zb2xlLmFzc2VydChyZXN1bHQuZ2VuZGVyID09PSBmYWxzZSwgJ+iOt+WPluS4jeWtmOWcqOeahOWxnuaAp+S4jeS4uuepuicpO1xufVxuIiwiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcbmltcG9ydCB7IG1hcHBpbmcsIG1hcCB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCBkYXRhU291cmNlIGZyb20gJy4vZGF0YS1zb3VyY2UnO1xuXG5jbGFzcyBCYXNlIHtcbiAgICBAbWFwcGluZygpXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbn1cblxuY2xhc3MgUGVyc29uIGV4dGVuZHMgQmFzZSB7XG4gICAgQG1hcHBpbmcoKVxuICAgIGdlbmRlcjogc3RyaW5nO1xuICAgIEBtYXBwaW5nKClcbiAgICBhZ2U6IG51bWJlciA9IDE7XG4gICAgQG1hcHBpbmcoeyBwYXRoOiAnc3JjLm51bWJlcicgfSlcbiAgICBudW06IG51bWJlcjtcbiAgICBAbWFwcGluZygpXG4gICAgZGF0ZTogRGF0ZTtcbn1cbmNvbnN0IHJlc3VsdCA9IG1hcChkYXRhU291cmNlLCBQZXJzb24pO1xuaWYgKHJlc3VsdCkge1xuICAgIGNvbnNvbGUuYXNzZXJ0KHJlc3VsdC5uYW1lID09PSBkYXRhU291cmNlLm5hbWUsICfmma7pgJrlsZ7mgKfojrflj5blpLHotKUnKTtcbiAgICBjb25zb2xlLmFzc2VydChpc05hTihyZXN1bHQuYWdlKSwgJ+aZrumAmuexu+Wei+i9rOaNouWksei0pScpO1xuICAgIGNvbnNvbGUuYXNzZXJ0KCEhcmVzdWx0Lm51bSwgJ+aLieWPluWvueixoeWksei0pScpO1xuICAgIGNvbnNvbGUuYXNzZXJ0KHJlc3VsdC5udW0gPT09ICtkYXRhU291cmNlLnNyYy5udW1iZXIsICfmma7pgJrnsbvlnovovazmjaLlpLHotKUnKTtcbiAgICBjb25zb2xlLmFzc2VydChyZXN1bHQuZ2VuZGVyID09PSB1bmRlZmluZWQsICfojrflj5bkuI3lrZjlnKjnmoTlsZ7mgKfkuI3kuLrnqbonKTtcbiAgICBjb25zb2xlLmFzc2VydChyZXN1bHQuZGF0ZSBpbnN0YW5jZW9mIERhdGUsICfml6XmnJ/lr7nlg4/ovazmjaLlpLHotKUnKTtcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJpbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0IHsgbWFwcGluZywgbWFwIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IGRhdGFTb3VyY2UgZnJvbSAnLi9kYXRhLXNvdXJjZSc7XG5cblxuY2xhc3MgUGVyc29uIHtcbiAgICBAbWFwcGluZyh7IHBhdGg6ICdhZGRyZXNzMVswXS5jaXR5JyB9KVxuICAgIGNpdHlOYW1lOiBzdHJpbmc7XG4gICAgQG1hcHBpbmc8UGVyc29uPigoX3ZhbHVlLCBzcmMsIGRlc3QpID0+IHtcbiAgICAgICAgcmV0dXJuIGBJJ20gJHtzcmMubmFtZX0gYW5kIGkgY29tZSBmcm9tICR7ZGVzdC5jaXR5TmFtZX1gO1xuICAgIH0pXG4gICAgaW50cm86IHN0cmluZztcbiAgICBAbWFwcGluZygoKSA9PiB7IHRocm93IG5ldyBFcnJvcignY2FzdCBlcnJvcicpIH0pXG4gICAgZXJyb3I6IHN0cmluZztcbn1cblxuY29uc3QgcmVzdWx0ID0gbWFwKGRhdGFTb3VyY2UsIFBlcnNvbik7XG5pZiAocmVzdWx0KSB7XG4gICAgY29uc29sZS5hc3NlcnQodHlwZW9mIHJlc3VsdC5pbnRybyA9PT0gJ3N0cmluZycsICfoh6rlrprkuYnovazmjaLlpLHotKUnKTtcbiAgICBjb25zb2xlLmFzc2VydCh0eXBlb2YgcmVzdWx0LmVycm9yID09PSAndW5kZWZpbmVkJywgJ+iHquWumuS5iei9rOaNouaKm+WHuumUmeivr+i9rOaNouWksei0pScpO1xufSIsImltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgeyBtYXBwaW5nLCBtYXAgfSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgZGF0YVNvdXJjZSBmcm9tICcuL2RhdGEtc291cmNlJztcblxuY2xhc3MgQWRkcmVzcyB7XG4gICAgQG1hcHBpbmcoKVxuICAgIGlkOiBudW1iZXI7XG4gICAgQG1hcHBpbmcoKVxuICAgIGNpdHk6ICcnO1xuICAgIEBtYXBwaW5nKHsgcGF0aDogJ3ppcF9jb2RlJyB9KVxuICAgIHppcENvZGU6ICcnO1xufVxuXG5jbGFzcyBQZXJzb24ge1xuICAgIEBtYXBwaW5nKHsgcGF0aDogJ2FkZHJlc3MxWzBdLmNpdHknIH0pXG4gICAgY2l0eU5hbWU6IHN0cmluZztcbiAgICBAbWFwcGluZyh7IHBhdGg6ICdzcmMubnVtYmVyJyB9KVxuICAgIG51bTogbnVtYmVyO1xuICAgIEBtYXBwaW5nKHsgcGF0aDogJ2FkZHJlc3MxWzBdJyB9KVxuICAgIGFkZHJlc3M6IEFkZHJlc3M7XG59XG5cbmNvbnN0IHJlc3VsdCA9IG1hcChkYXRhU291cmNlLCBQZXJzb24pO1xuaWYgKHJlc3VsdCkge1xuICAgIGNvbnNvbGUuYXNzZXJ0KHJlc3VsdC5jaXR5TmFtZSA9PT0gZGF0YVNvdXJjZS5hZGRyZXNzLmNpdHksICflsZ7mgKfmi4nlj5blpLHotKUnKTtcbiAgICBjb25zb2xlLmFzc2VydCh0eXBlb2YgcmVzdWx0Lm51bSA9PT0gJ251bWJlcicsICfmi4nlj5bln7rnoYDlsZ7mgKfovazmjaLlpLHotKUnKTtcbiAgICBjb25zb2xlLmFzc2VydChyZXN1bHQuYWRkcmVzcyBpbnN0YW5jZW9mIEFkZHJlc3MsICfmi4nlj5boh6rlrprkuYnnsbvlnovlsZ7mgKfovazmjaLlpLHotKUnKVxufVxuIiwiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcbmltcG9ydCB7IG1hcHBpbmcsIG1hcCB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCBkYXRhU291cmNlIGZyb20gJy4vZGF0YS1zb3VyY2UnO1xuXG5jbGFzcyBBZGRyZXNzIHtcbiAgICBAbWFwcGluZygpXG4gICAgaWQ6IG51bWJlcjtcbiAgICBAbWFwcGluZygpXG4gICAgY2l0eTogJyc7XG4gICAgQG1hcHBpbmcoeyBwYXRoOiAnemlwX2NvZGUnIH0pXG4gICAgemlwQ29kZTogJyc7XG59XG5cbmNsYXNzIEJhc2Uge1xuICAgIEBtYXBwaW5nKClcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xufVxuXG5jbGFzcyBQZXJzb24gZXh0ZW5kcyBCYXNlIHtcbiAgICBAbWFwcGluZygpXG4gICAgYWRkcmVzczogQWRkcmVzcztcbn1cblxuY29uc3QgcmVzdWx0ID0gbWFwKGRhdGFTb3VyY2UsIFBlcnNvbik7XG5pZiAocmVzdWx0KSB7XG4gICAgY29uc29sZS5hc3NlcnQocmVzdWx0Lm5hbWUgPT09IGRhdGFTb3VyY2UubmFtZSwgJ+aZrumAmuWxnuaAp+iOt+WPluWksei0pScpO1xuICAgIGNvbnNvbGUuYXNzZXJ0KHJlc3VsdC5hZGRyZXNzICYmIHJlc3VsdC5hZGRyZXNzIGluc3RhbmNlb2YgQWRkcmVzcywgJ+iHquWumuS5ieWvueixoei9rOaNouWksei0pScpO1xufVxuIiwiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcbmltcG9ydCB7IG1hcHBpbmcsIG1hcCB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCBkYXRhU291cmNlIGZyb20gJy4vZGF0YS1zb3VyY2UnO1xuXG5jbGFzcyBBZGRyZXNzIHtcbiAgICBAbWFwcGluZygpXG4gICAgaWQ6IG51bWJlcjtcbiAgICBAbWFwcGluZygpXG4gICAgY2l0eTogJyc7XG4gICAgQG1hcHBpbmcoeyBwYXRoOiAnemlwX2NvZGUnIH0pXG4gICAgemlwQ29kZTogJyc7XG59XG5cbmNsYXNzIFBlcnNvbiB7XG4gICAgQG1hcHBpbmcoeyBwYXRoOiAnYWRkcmVzczEnLCB0eXBlOiBbQWRkcmVzc10gfSlcbiAgICBhZGRyZXNzMTogQWRkcmVzc1tdO1xuICAgIEBtYXBwaW5nKHsgdHlwZTogW0RhdGVdIH0pXG4gICAgZGF0ZXM6IGFueTtcbn1cblxuY29uc3QgcmVzdWx0ID0gbWFwKGRhdGFTb3VyY2UsIFBlcnNvbik7XG5pZiAocmVzdWx0KSB7XG4gICAgY29uc29sZS5hc3NlcnQoQXJyYXkuaXNBcnJheShyZXN1bHQuZGF0ZXMpLCAn5pWw57uE6L2s5o2i5aSx6LSlJyk7XG4gICAgY29uc29sZS5hc3NlcnQocmVzdWx0LmFkZHJlc3MxWzBdIGluc3RhbmNlb2YgQWRkcmVzcywgJ+aVsOe7hOWvueWDj+i9rOaNouWksei0pScpO1xufVxuIiwiaW1wb3J0IHsgbWFwcGluZywgbWFwIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IGRhdGFTb3VyY2UgZnJvbSAnLi9kYXRhLXNvdXJjZSc7XG5cbmNsYXNzIFBlcnNvbiB7XG4gICAgQG1hcHBpbmcoeyB0eXBlOiBTdHJpbmcsIHNvdXJjZTogJ290aGVyJywgcGF0aDogJ3BlcnNvbi5sYXN0bmFtZScgfSlcbiAgICBAbWFwcGluZyh7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJ2Zpc2hlcicgfSlcbiAgICBuYW1lOiBzdHJpbmc7XG59XG5jb25zdCBkYXRhU291cmNlMSA9IHtcbiAgICBwZXJzb246IHsgbGFzdG5hbWU6ICdqYWNrJyB9XG59O1xuY29uc3QgcmVzdWx0ID0gbWFwKGRhdGFTb3VyY2UsIFBlcnNvbik7XG5jb25zdCByZXN1bHQxID0gbWFwKGRhdGFTb3VyY2UxLCBQZXJzb24sIHsgc291cmNlOiAnb3RoZXInIH0pO1xuXG5pZiAocmVzdWx0ICYmIHJlc3VsdDEpIHtcbiAgICBjb25zb2xlLmFzc2VydChyZXN1bHQubmFtZSA9PT0gZGF0YVNvdXJjZS5uYW1lICYmIHJlc3VsdDEubmFtZSA9PT0gZGF0YVNvdXJjZTEucGVyc29uLmxhc3RuYW1lLCAn5aSa5Liq5pWw5o2u5rqQ5bGe5oCn6I635Y+W5aSx6LSlJyk7XG59IiwiaW1wb3J0IHsgbWFwcGluZywgbWFwIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IGRhdGFTb3VyY2UgZnJvbSAnLi9kYXRhLXNvdXJjZSc7XG5cbmNsYXNzIFBlcnNvbiB7XG4gICAgQG1hcHBpbmcoeyBjb252ZXJ0OiAoX3NyYywgZGVzdCkgPT4gZGVzdC5uYW1lLCBvcmRlcjogMSB9KVxuICAgIGZ1bGxOYW1lOiBzdHJpbmc7XG4gICAgQG1hcHBpbmcoeyB0eXBlOiBTdHJpbmcgfSlcbiAgICBuYW1lOiBzdHJpbmcgPSAnamFjayc7XG59XG5jb25zdCByZXN1bHQgPSBtYXAoZGF0YVNvdXJjZSwgUGVyc29uKTtcblxuaWYgKHJlc3VsdCkge1xuICAgIGNvbnNvbGUuYXNzZXJ0KHJlc3VsdC5mdWxsTmFtZSA9PT0gZGF0YVNvdXJjZS5uYW1lLCAn5o6S5bqP5bGe5oCn6I635Y+W5aSx6LSlJyk7XG59IiwiaW1wb3J0IHsgbWFwcGluZywgbWFwIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IGRhdGFTb3VyY2UgZnJvbSAnLi9kYXRhLXNvdXJjZSc7XG5cbmNsYXNzIFBlcnNvbiB7XG4gICAgQG1hcHBpbmcoeyB0eXBlOiBTdHJpbmcsIHNvdXJjZTogJ290aGVyJywgcGF0aDogJ3BlcnNvbi5sYXN0bmFtZScgfSlcbiAgICBAbWFwcGluZyh7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJ2Zpc2hlcicgfSlcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgQG1hcHBpbmcoeyB0eXBlOiBOdW1iZXIsIHBhdGg6ICdzcmMubnVtYmVyJyB9KVxuICAgIGFnZTogbnVtYmVyO1xufVxuY29uc3QgZGF0YVNvdXJjZTEgPSB7XG4gICAgcGVyc29uOiB7IGxhc3RuYW1lOiAnamFjaycgfSxcbiAgICBzcmM6IHsgbnVtYmVyOiAxOCB9LFxufTtcbmNvbnN0IHJlc3VsdCA9IG1hcChkYXRhU291cmNlLCBQZXJzb24pO1xuY29uc3QgcmVzdWx0MSA9IG1hcChkYXRhU291cmNlMSwgUGVyc29uLCB7IHNvdXJjZTogJ290aGVyJyB9KTtcbmNvbnN0IHJlc3VsdDIgPSBtYXAoZGF0YVNvdXJjZTEsIFBlcnNvbiwgeyBzb3VyY2U6ICdvdGhlcicsIHVzZURlZmF1bHRTb3VyY2U6IGZhbHNlIH0pO1xuXG5pZiAocmVzdWx0ICYmIHJlc3VsdDEpIHtcbiAgICBjb25zb2xlLmFzc2VydChyZXN1bHQubmFtZSA9PT0gZGF0YVNvdXJjZS5uYW1lICYmIHJlc3VsdDEubmFtZSA9PT0gZGF0YVNvdXJjZTEucGVyc29uLmxhc3RuYW1lLCAn5aSa5Liq5pWw5o2u5rqQ5bGe5oCn6I635Y+W5aSx6LSlJyk7XG4gICAgY29uc29sZS5hc3NlcnQocmVzdWx0MS5hZ2UgPT09IGRhdGFTb3VyY2UxLnNyYy5udW1iZXIsICfkvb/nlKjpu5jorqTmlbDmja7mupDphY3nva7lpLHotKUnKTtcbiAgICBjb25zb2xlLmFzc2VydChyZXN1bHQyLmFnZSA9PT0gdW5kZWZpbmVkLCAn5LiN5L2/55So6buY6K6k5pWw5o2u5rqQ6YWN572u5aSx6LSlJyk7XG4gICAgY29uc29sZS5sb2cocmVzdWx0Mik7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==